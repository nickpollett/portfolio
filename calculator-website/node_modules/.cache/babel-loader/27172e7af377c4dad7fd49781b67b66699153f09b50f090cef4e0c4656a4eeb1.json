{"ast":null,"code":"import _objectSpread from\"C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as turf from'@turf/turf';// Filter collision data within the selected polygon\nexport const filterDataByArea=(data,polygon)=>{console.log(\"Polygon being used for filtering:\",JSON.stringify(polygon,null,2));return data.filter(row=>{const point=turf.point([row.LONGITUDE,row.LATITUDE]);return turf.booleanPointInPolygon(point,polygon);});};// Adjust counts for injuries and property damage PER ROW\nexport const adjustCounts=data=>{return data.map(row=>{let adjustedInjuries=0;let adjustedPropertyDamage=0;let adjustedFatalities=0;if(row.TYPE==='INJURY'){adjustedInjuries=Math.floor(row.count*1.78);}else if(row.TYPE==='FATALITY'){adjustedFatalities=Math.floor(row.count*1.017);}else if(row.TYPE==='PROPERTY'){adjustedPropertyDamage=row.count;// Property damage remains unchanged initially\n}return _objectSpread(_objectSpread({},row),{},{adjustedInjuries,adjustedPropertyDamage,adjustedFatalities});});};// Calculate costs PER ROW\nexport const calculateCosts=data=>{const costMatrix={INJURY:{direct:48341,human:89408,wtp:158654},FATALITY:{direct:225558,human:2224580,wtp:6707228},PROPERTY:{direct:14065,human:0,wtp:0}};return data.map(row=>{let totalDirect=0;let totalHuman=0;let totalWtp=0;if(row.TYPE==='INJURY'){totalDirect=row.adjustedInjuries*costMatrix.INJURY.direct;totalHuman=row.adjustedInjuries*costMatrix.INJURY.human;totalWtp=row.adjustedInjuries*costMatrix.INJURY.wtp;}else if(row.TYPE==='FATALITY'){totalDirect=row.adjustedFatalities*costMatrix.FATALITY.direct;totalHuman=row.adjustedFatalities*costMatrix.FATALITY.human;totalWtp=row.adjustedFatalities*costMatrix.FATALITY.wtp;}else if(row.TYPE==='PROPERTY'){totalDirect=row.adjustedPropertyDamage*costMatrix.PROPERTY.direct;}// Apply inflation adjustment only to the valid costs\nconst inflationAdjustedDirect=totalDirect*1.2084;const inflationAdjustedHuman=totalHuman*1.2084;const inflationAdjustedWtp=totalWtp*1.2084;return _objectSpread(_objectSpread({},row),{},{totalDirect:inflationAdjustedDirect,totalHuman:inflationAdjustedHuman,totalWtp:inflationAdjustedWtp,total:inflationAdjustedDirect+inflationAdjustedHuman+inflationAdjustedWtp});});};// Aggregate totals and calculate yearly/daily averages\nexport const aggregateTotals=data=>{const totals=data.reduce((acc,row)=>({totalDirect:acc.totalDirect+row.totalDirect,totalHuman:acc.totalHuman+row.totalHuman,totalWtp:acc.totalWtp+row.totalWtp,total:acc.total+row.total}),{totalDirect:0,totalHuman:0,totalWtp:0,total:0});// If the area only has property damage, ensure other costs remain 0\nif(totals.totalHuman===0&&totals.totalWtp===0){totals.total=totals.totalDirect;}const yearly={totalDirect:totals.totalDirect/3,totalHuman:totals.totalHuman/3,totalWtp:totals.totalWtp/3,total:totals.total/3};const daily={totalDirect:yearly.totalDirect/365,totalHuman:yearly.totalHuman/365,totalWtp:yearly.totalWtp/365,total:yearly.total/365};return{totals,yearly,daily};};","map":{"version":3,"names":["turf","filterDataByArea","data","polygon","console","log","JSON","stringify","filter","row","point","LONGITUDE","LATITUDE","booleanPointInPolygon","adjustCounts","map","adjustedInjuries","adjustedPropertyDamage","adjustedFatalities","TYPE","Math","floor","count","_objectSpread","calculateCosts","costMatrix","INJURY","direct","human","wtp","FATALITY","PROPERTY","totalDirect","totalHuman","totalWtp","inflationAdjustedDirect","inflationAdjustedHuman","inflationAdjustedWtp","total","aggregateTotals","totals","reduce","acc","yearly","daily"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/utils/costCalculations.js"],"sourcesContent":["import * as turf from '@turf/turf';\r\n\r\n// Filter collision data within the selected polygon\r\nexport const filterDataByArea = (data, polygon) => {\r\n    console.log(\"Polygon being used for filtering:\", JSON.stringify(polygon, null, 2));\r\n  return data.filter((row) => {\r\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\r\n    return turf.booleanPointInPolygon(point, polygon);\r\n  });\r\n};\r\n\r\n// Adjust counts for injuries and property damage PER ROW\r\nexport const adjustCounts = (data) => {\r\n  return data.map((row) => {\r\n    let adjustedInjuries = 0;\r\n    let adjustedPropertyDamage = 0;\r\n    let adjustedFatalities = 0;\r\n\r\n    if (row.TYPE === 'INJURY') {\r\n      adjustedInjuries = Math.floor(row.count * 1.78);\r\n    } else if (row.TYPE === 'FATALITY') {\r\n      adjustedFatalities = Math.floor(row.count * 1.017);\r\n    } else if (row.TYPE === 'PROPERTY') {\r\n      adjustedPropertyDamage = row.count; // Property damage remains unchanged initially\r\n    }\r\n\r\n    return {\r\n      ...row,\r\n      adjustedInjuries,\r\n      adjustedPropertyDamage,\r\n      adjustedFatalities,\r\n    };\r\n  });\r\n};\r\n\r\n// Calculate costs PER ROW\r\nexport const calculateCosts = (data) => {\r\n  const costMatrix = {\r\n    INJURY: { direct: 48341, human: 89408, wtp: 158654 },\r\n    FATALITY: { direct: 225558, human: 2224580, wtp: 6707228 },\r\n    PROPERTY: { direct: 14065, human: 0, wtp: 0 },\r\n  };\r\n\r\n  return data.map((row) => {\r\n    let totalDirect = 0;\r\n    let totalHuman = 0;\r\n    let totalWtp = 0;\r\n\r\n    if (row.TYPE === 'INJURY') {\r\n      totalDirect = row.adjustedInjuries * costMatrix.INJURY.direct;\r\n      totalHuman = row.adjustedInjuries * costMatrix.INJURY.human;\r\n      totalWtp = row.adjustedInjuries * costMatrix.INJURY.wtp;\r\n    } else if (row.TYPE === 'FATALITY') {\r\n      totalDirect = row.adjustedFatalities * costMatrix.FATALITY.direct;\r\n      totalHuman = row.adjustedFatalities * costMatrix.FATALITY.human;\r\n      totalWtp = row.adjustedFatalities * costMatrix.FATALITY.wtp;\r\n    } else if (row.TYPE === 'PROPERTY') {\r\n      totalDirect = row.adjustedPropertyDamage * costMatrix.PROPERTY.direct;\r\n    }\r\n\r\n    // Apply inflation adjustment only to the valid costs\r\n    const inflationAdjustedDirect = totalDirect * 1.2084;\r\n    const inflationAdjustedHuman = totalHuman * 1.2084;\r\n    const inflationAdjustedWtp = totalWtp * 1.2084;\r\n\r\n    return {\r\n      ...row,\r\n      totalDirect: inflationAdjustedDirect,\r\n      totalHuman: inflationAdjustedHuman,\r\n      totalWtp: inflationAdjustedWtp,\r\n      total: inflationAdjustedDirect + inflationAdjustedHuman + inflationAdjustedWtp,\r\n    };\r\n  });\r\n};\r\n\r\n// Aggregate totals and calculate yearly/daily averages\r\nexport const aggregateTotals = (data) => {\r\n  const totals = data.reduce(\r\n    (acc, row) => ({\r\n      totalDirect: acc.totalDirect + row.totalDirect,\r\n      totalHuman: acc.totalHuman + row.totalHuman,\r\n      totalWtp: acc.totalWtp + row.totalWtp,\r\n      total: acc.total + row.total,\r\n    }),\r\n    { totalDirect: 0, totalHuman: 0, totalWtp: 0, total: 0 }\r\n  );\r\n\r\n  // If the area only has property damage, ensure other costs remain 0\r\n  if (totals.totalHuman === 0 && totals.totalWtp === 0) {\r\n    totals.total = totals.totalDirect;\r\n  }\r\n\r\n  const yearly = {\r\n    totalDirect: totals.totalDirect / 3,\r\n    totalHuman: totals.totalHuman / 3,\r\n    totalWtp: totals.totalWtp / 3,\r\n    total: totals.total / 3,\r\n  };\r\n\r\n  const daily = {\r\n    totalDirect: yearly.totalDirect / 365,\r\n    totalHuman: yearly.totalHuman / 365,\r\n    totalWtp: yearly.totalWtp / 365,\r\n    total: yearly.total / 365,\r\n  };\r\n\r\n  return { totals, yearly, daily };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}