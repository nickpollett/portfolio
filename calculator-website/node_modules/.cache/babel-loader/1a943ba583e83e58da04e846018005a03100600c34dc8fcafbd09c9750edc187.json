{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicholas Pollett\\\\Documents\\\\GitHub\\\\CollisionCalculator\\\\calculator-website\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  collisionData,\n  onResultsUpdate\n}) => {\n  _s();\n  const [viewport, setViewport] = useState({\n    latitude: 52.1332,\n    longitude: -106.6700,\n    zoom: 11,\n    width: '100%',\n    height: '100%'\n  });\n  const [firstCorner, setFirstCorner] = useState(null); // First corner of the rectangle\n  const [secondCorner, setSecondCorner] = useState(null); // Second corner of the rectangle\n  const [selectedArea, setSelectedArea] = useState(null); // Selected area as a polygon\n  const mapRef = useRef(null);\n\n  // Handle the first click to set the first corner\n  const handleFirstClick = useCallback(event => {\n    const {\n      lngLat\n    } = event;\n    setFirstCorner(lngLat);\n    setSecondCorner(null); // Reset the second corner\n    setSelectedArea(null); // Reset the selected area\n  }, []);\n\n  // Handle the second click to set the second corner and create the rectangle\n  const handleSecondClick = useCallback(event => {\n    if (!firstCorner) return; // Ensure the first corner is set\n\n    const {\n      lngLat\n    } = event;\n    setSecondCorner(lngLat);\n\n    // Create the rectangle coordinates\n    const coordinates = [[[firstCorner.lng, firstCorner.lat], [firstCorner.lng, lngLat.lat], [lngLat.lng, lngLat.lat], [lngLat.lng, firstCorner.lat], [firstCorner.lng, firstCorner.lat] // Close the rectangle\n    ]];\n\n    // Set the selected area\n    setSelectedArea({\n      type: 'Polygon',\n      coordinates\n    });\n\n    // Filter collision data within the selected area\n    const filteredData = filterDataByArea(collisionData, {\n      type: 'Polygon',\n      coordinates\n    });\n\n    // Count collisions by type\n    const counts = {\n      INJURY: filteredData.filter(row => row.TYPE === 'INJURY').length,\n      FATALITY: filteredData.filter(row => row.TYPE === 'FATALITY').length,\n      PROPERTY: filteredData.filter(row => row.TYPE === 'PROPERTY').length\n    };\n\n    // Format the data for cost calculations\n    const formattedData = [{\n      TYPE: 'INJURY',\n      count: counts.INJURY\n    }, {\n      TYPE: 'FATALITY',\n      count: counts.FATALITY\n    }, {\n      TYPE: 'PROPERTY',\n      count: counts.PROPERTY\n    }];\n\n    // Calculate costs for the filtered data\n    const adjustedData = adjustCounts(formattedData);\n    const costData = calculateCosts(adjustedData);\n    const {\n      totals,\n      yearly,\n      daily\n    } = aggregateTotals(costData);\n\n    // Pass results to the parent component\n    onResultsUpdate({\n      totals,\n      yearly,\n      daily\n    });\n\n    // Reset the first corner for the next selection\n    setFirstCorner(null);\n  }, [firstCorner, collisionData, onResultsUpdate]);\n\n  // Handle map clicks\n  const handleMapClick = useCallback(event => {\n    if (!firstCorner) {\n      handleFirstClick(event);\n    } else {\n      handleSecondClick(event);\n    }\n  }, [firstCorner, handleFirstClick, handleSecondClick]);\n  return /*#__PURE__*/_jsxDEV(ReactMapGL, {\n    ...viewport,\n    ref: mapRef,\n    mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n    onViewportChange: setViewport,\n    onClick: handleMapClick // Use onClick for two-click selection\n    ,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    scrollZoom: true // Enable zoom with scroll wheel\n    ,\n    doubleClickZoom: true // Enable zoom with double click\n    ,\n    dragPan: true // Enable panning\n    ,\n    dragRotate: true // Enable rotation\n    ,\n    touchZoom: true // Enable zoom on touch devices\n    ,\n    touchRotate: true // Enable rotation on touch devices\n    ,\n    children: selectedArea && /*#__PURE__*/_jsxDEV(Source, {\n      type: \"geojson\",\n      data: {\n        type: 'Feature',\n        geometry: selectedArea\n      },\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        id: \"selected-area\",\n        type: \"fill\",\n        paint: {\n          'fill-color': '#3FB1CE',\n          'fill-opacity': 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Layer, {\n        id: \"selected-area-outline\",\n        type: \"line\",\n        paint: {\n          'line-color': '#3FB1CE',\n          'line-width': 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"g9fBemRHJNTPMLyit3PMWVq5YzU=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactMapGL","Source","Layer","calculateCosts","aggregateTotals","filterDataByArea","adjustCounts","jsxDEV","_jsxDEV","MapComponent","collisionData","onResultsUpdate","_s","viewport","setViewport","latitude","longitude","zoom","width","height","firstCorner","setFirstCorner","secondCorner","setSecondCorner","selectedArea","setSelectedArea","mapRef","handleFirstClick","event","lngLat","handleSecondClick","coordinates","lng","lat","type","filteredData","counts","INJURY","filter","row","TYPE","length","FATALITY","PROPERTY","formattedData","count","adjustedData","costData","totals","yearly","daily","handleMapClick","ref","mapboxAccessToken","process","env","REACT_APP_MAPBOX_TOKEN","onViewportChange","onClick","mapStyle","style","scrollZoom","doubleClickZoom","dragPan","dragRotate","touchZoom","touchRotate","children","data","geometry","id","paint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\r\n\r\nconst MapComponent = ({ collisionData, onResultsUpdate }) => {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 52.1332,\r\n    longitude: -106.6700,\r\n    zoom: 11,\r\n    width: '100%',\r\n    height: '100%',\r\n  });\r\n\r\n  const [firstCorner, setFirstCorner] = useState(null); // First corner of the rectangle\r\n  const [secondCorner, setSecondCorner] = useState(null); // Second corner of the rectangle\r\n  const [selectedArea, setSelectedArea] = useState(null); // Selected area as a polygon\r\n  const mapRef = useRef(null);\r\n\r\n  // Handle the first click to set the first corner\r\n  const handleFirstClick = useCallback((event) => {\r\n    const { lngLat } = event;\r\n    setFirstCorner(lngLat);\r\n    setSecondCorner(null); // Reset the second corner\r\n    setSelectedArea(null); // Reset the selected area\r\n  }, []);\r\n\r\n  // Handle the second click to set the second corner and create the rectangle\r\n  const handleSecondClick = useCallback(\r\n    (event) => {\r\n      if (!firstCorner) return; // Ensure the first corner is set\r\n\r\n      const { lngLat } = event;\r\n      setSecondCorner(lngLat);\r\n\r\n      // Create the rectangle coordinates\r\n      const coordinates = [\r\n        [\r\n          [firstCorner.lng, firstCorner.lat],\r\n          [firstCorner.lng, lngLat.lat],\r\n          [lngLat.lng, lngLat.lat],\r\n          [lngLat.lng, firstCorner.lat],\r\n          [firstCorner.lng, firstCorner.lat], // Close the rectangle\r\n        ],\r\n      ];\r\n\r\n      // Set the selected area\r\n      setSelectedArea({\r\n        type: 'Polygon',\r\n        coordinates,\r\n      });\r\n\r\n      // Filter collision data within the selected area\r\n      const filteredData = filterDataByArea(collisionData, {\r\n        type: 'Polygon',\r\n        coordinates,\r\n      });\r\n\r\n      // Count collisions by type\r\n      const counts = {\r\n        INJURY: filteredData.filter((row) => row.TYPE === 'INJURY').length,\r\n        FATALITY: filteredData.filter((row) => row.TYPE === 'FATALITY').length,\r\n        PROPERTY: filteredData.filter((row) => row.TYPE === 'PROPERTY').length,\r\n      };\r\n\r\n      // Format the data for cost calculations\r\n      const formattedData = [\r\n        { TYPE: 'INJURY', count: counts.INJURY },\r\n        { TYPE: 'FATALITY', count: counts.FATALITY },\r\n        { TYPE: 'PROPERTY', count: counts.PROPERTY },\r\n      ];\r\n\r\n      // Calculate costs for the filtered data\r\n      const adjustedData = adjustCounts(formattedData);\r\n      const costData = calculateCosts(adjustedData);\r\n      const { totals, yearly, daily } = aggregateTotals(costData);\r\n\r\n      // Pass results to the parent component\r\n      onResultsUpdate({ totals, yearly, daily });\r\n\r\n      // Reset the first corner for the next selection\r\n      setFirstCorner(null);\r\n    },\r\n    [firstCorner, collisionData, onResultsUpdate]\r\n  );\r\n\r\n  // Handle map clicks\r\n  const handleMapClick = useCallback(\r\n    (event) => {\r\n      if (!firstCorner) {\r\n        handleFirstClick(event);\r\n      } else {\r\n        handleSecondClick(event);\r\n      }\r\n    },\r\n    [firstCorner, handleFirstClick, handleSecondClick]\r\n  );\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      ref={mapRef}\r\n      mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n      onViewportChange={setViewport}\r\n      onClick={handleMapClick} // Use onClick for two-click selection\r\n      mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n      style={{ width: '100%', height: '100%' }}\r\n      scrollZoom={true} // Enable zoom with scroll wheel\r\n      doubleClickZoom={true} // Enable zoom with double click\r\n      dragPan={true} // Enable panning\r\n      dragRotate={true} // Enable rotation\r\n      touchZoom={true} // Enable zoom on touch devices\r\n      touchRotate={true} // Enable rotation on touch devices\r\n    >\r\n      {/* Render the selected area as a rectangle on the map */}\r\n      {selectedArea && (\r\n        <Source type=\"geojson\" data={{ type: 'Feature', geometry: selectedArea }}>\r\n          <Layer\r\n            id=\"selected-area\"\r\n            type=\"fill\"\r\n            paint={{\r\n              'fill-color': '#3FB1CE',\r\n              'fill-opacity': 0.5,\r\n            }}\r\n          />\r\n          <Layer\r\n            id=\"selected-area-outline\"\r\n            type=\"line\"\r\n            paint={{\r\n              'line-color': '#3FB1CE',\r\n              'line-width': 2,\r\n            }}\r\n          />\r\n        </Source>\r\n      )}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}