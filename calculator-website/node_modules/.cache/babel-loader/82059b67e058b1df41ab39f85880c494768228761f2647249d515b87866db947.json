{"ast":null,"code":"import _objectSpread from \"C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport const MountedMapsContext = React.createContext(null);\nexport const MapProvider = props => {\n  const [maps, setMaps] = useState({});\n  const onMapMount = useCallback(function (map) {\n    let id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(\"Multiple maps with the same id: \".concat(id));\n      }\n      return _objectSpread(_objectSpread({}, currMaps), {}, {\n        [id]: map\n      });\n    });\n  }, []);\n  const onMapUnmount = useCallback(function () {\n    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = _objectSpread({}, currMaps);\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps,\n      onMapMount,\n      onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  var _a;\n  const maps = (_a = useContext(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;\n  const currentMap = useContext(MapContext);\n  const mapsWithCurrent = useMemo(() => {\n    return _objectSpread(_objectSpread({}, maps), {}, {\n      current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map\n    });\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","props","maps","setMaps","onMapMount","map","id","arguments","length","undefined","currMaps","Error","concat","_objectSpread","onMapUnmount","nextMaps","createElement","Provider","value","children","useMap","_a","currentMap","mapsWithCurrent","current"],"sources":["C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\react-map-gl\\src\\components\\use-map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {useState, useCallback, useMemo, useContext} from 'react';\n\nimport {MapRef} from '../mapbox/create-ref';\nimport {MapContext} from './map';\nimport {MapInstance} from '../types';\n\ntype MountedMapsContextValue = {\n  maps: {[id: string]: MapRef<MapInstance>};\n  onMapMount: (map: MapRef<MapInstance>, id: string) => void;\n  onMapUnmount: (id: string) => void;\n};\n\nexport const MountedMapsContext = React.createContext<MountedMapsContextValue>(null);\n\nexport const MapProvider: React.FC<{children?: React.ReactNode}> = props => {\n  const [maps, setMaps] = useState<{[id: string]: MapRef<MapInstance>}>({});\n\n  const onMapMount = useCallback((map: MapRef<MapInstance>, id: string = 'default') => {\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n      return {...currMaps, [id]: map};\n    });\n  }, []);\n\n  const onMapUnmount = useCallback((id: string = 'default') => {\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = {...currMaps};\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n\n  return (\n    <MountedMapsContext.Provider\n      value={{\n        maps,\n        onMapMount,\n        onMapUnmount\n      }}\n    >\n      {props.children}\n    </MountedMapsContext.Provider>\n  );\n};\n\nexport function useMap<MapT extends MapInstance>() {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n\n  const mapsWithCurrent = useMemo(() => {\n    return {...maps, current: currentMap?.map};\n  }, [maps, currentMap]);\n\n  return mapsWithCurrent as {current?: MapRef<MapT>; [id: string]: MapRef<MapT> | undefined};\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,EAAEC,WAAW,EAAEC,OAAO,EAAEC,UAAU,QAAO,OAAO;AAGhE,SAAQC,UAAU,QAAO,OAAO;AAShC,OAAO,MAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAa,CAA0B,IAAI,CAAC;AAEpF,OAAO,MAAMC,WAAW,GAA2CC,KAAK,IAAG;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAsC,EAAE,CAAC;EAEzE,MAAMW,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAwB,EAA4B;IAAA,IAA1BC,EAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,SAAS;IAC9EJ,OAAO,CAACO,QAAQ,IAAG;MACjB,IAAIJ,EAAE,KAAK,SAAS,EAAE;QACpB,MAAM,IAAIK,KAAK,CAAC,oCAAoC,CAAC;;MAEvD,IAAID,QAAQ,CAACJ,EAAE,CAAC,EAAE;QAChB,MAAM,IAAIK,KAAK,oCAAAC,MAAA,CAAoCN,EAAE,CAAE,CAAC;;MAE1D,OAAAO,aAAA,CAAAA,aAAA,KAAWH,QAAQ;QAAE,CAACJ,EAAE,GAAGD;MAAG;IAChC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,YAAY,GAAGpB,WAAW,CAAC,YAA2B;IAAA,IAA1BY,EAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAa,SAAS;IACtDJ,OAAO,CAACO,QAAQ,IAAG;MACjB,IAAIA,QAAQ,CAACJ,EAAE,CAAC,EAAE;QAChB,MAAMS,QAAQ,GAAAF,aAAA,KAAOH,QAAQ,CAAC;QAC9B,OAAOK,QAAQ,CAACT,EAAE,CAAC;QACnB,OAAOS,QAAQ;;MAEjB,OAAOL,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OACElB,KAAA,CAAAwB,aAAA,CAAClB,kBAAkB,CAACmB,QAAQ;IAC1BC,KAAK,EAAE;MACLhB,IAAI;MACJE,UAAU;MACVU;;EACD,GAEAb,KAAK,CAACkB,QAAQ,CACa;AAElC,CAAC;AAED,OAAM,SAAUC,MAAMA,CAAA;;EACpB,MAAMlB,IAAI,GAAG,CAAAmB,EAAA,GAAAzB,UAAU,CAACE,kBAAkB,CAAC,cAAAuB,EAAA,uBAAAA,EAAA,CAAEnB,IAAI;EACjD,MAAMoB,UAAU,GAAG1B,UAAU,CAACC,UAAU,CAAC;EAEzC,MAAM0B,eAAe,GAAG5B,OAAO,CAAC,MAAK;IACnC,OAAAkB,aAAA,CAAAA,aAAA,KAAWX,IAAI;MAAEsB,OAAO,EAAEF,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEjB;IAAG;EAC3C,CAAC,EAAE,CAACH,IAAI,EAAEoB,UAAU,CAAC,CAAC;EAEtB,OAAOC,eAAmF;AAC5F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}