{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicholas Pollett\\\\Documents\\\\GitHub\\\\CollisionCalculator\\\\calculator-website\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\n// Define the Polygon shape in JavaScript\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPolygon = {\n  type: 'Polygon',\n  coordinates: [] // Array of arrays of positions\n};\nconst MapComponent = ({\n  collisionData,\n  onResultsUpdate\n}) => {\n  _s();\n  const [viewport, setViewport] = useState({\n    latitude: 52.1332,\n    longitude: -106.6700,\n    zoom: 11,\n    width: '100%',\n    height: '100%'\n  });\n  const [selectedArea, setSelectedArea] = useState(initialPolygon);\n  const mapRef = useRef(null);\n\n  // Handle map click to start drawing a selection\n  const handleMapClick = useCallback(event => {\n    const {\n      lngLat\n    } = event;\n    if (!selectedArea.coordinates.length) {\n      setSelectedArea({\n        type: 'Polygon',\n        coordinates: [[[lngLat.lng, lngLat.lat]]]\n      });\n    } else {\n      setSelectedArea(prev => ({\n        ...prev,\n        coordinates: [[...prev.coordinates[0], [lngLat.lng, lngLat.lat]]]\n      }));\n    }\n  }, [selectedArea]);\n\n  // Handle map double-click to finish drawing the selection\n  const handleMapDoubleClick = useCallback(() => {\n    if (selectedArea.coordinates.length > 2) {\n      // Close the polygon\n      setSelectedArea(prev => ({\n        ...prev,\n        coordinates: [[...prev.coordinates[0], [prev.coordinates[0][0][0], prev.coordinates[0][0][1]]]]\n      }));\n\n      // Filter collision data within the selected area\n      const filteredData = filterDataByArea(collisionData, selectedArea);\n\n      // Count collisions by type\n      const counts = {\n        INJURY: filteredData.filter(row => row.TYPE === 'INJURY').length,\n        FATALITY: filteredData.filter(row => row.TYPE === 'FATALITY').length,\n        PROPERTY: filteredData.filter(row => row.TYPE === 'PROPERTY').length\n      };\n\n      // Format the data for cost calculations\n      const formattedData = [{\n        TYPE: 'INJURY',\n        count: counts.INJURY\n      }, {\n        TYPE: 'FATALITY',\n        count: counts.FATALITY\n      }, {\n        TYPE: 'PROPERTY',\n        count: counts.PROPERTY\n      }];\n\n      // Calculate costs for the filtered data\n      const adjustedData = adjustCounts(formattedData);\n      const costData = calculateCosts(adjustedData);\n      const {\n        totals,\n        yearly,\n        daily\n      } = aggregateTotals(costData);\n\n      // Pass results to the parent component\n      onResultsUpdate({\n        totals,\n        yearly,\n        daily\n      });\n    }\n  }, [selectedArea, collisionData, onResultsUpdate]);\n  return /*#__PURE__*/_jsxDEV(ReactMapGL, {\n    ...viewport,\n    ref: mapRef,\n    mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n    onViewportChange: newViewport => setViewport(newViewport),\n    onClick: handleMapClick,\n    onDblClick: handleMapDoubleClick,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: selectedArea.coordinates.length > 0 && /*#__PURE__*/_jsxDEV(Source, {\n      type: \"geojson\",\n      data: {\n        type: 'Feature',\n        geometry: selectedArea\n      },\n      children: /*#__PURE__*/_jsxDEV(Layer, {\n        id: \"selected-area\",\n        type: \"fill\",\n        paint: {\n          'fill-color': '#3FB1CE',\n          'fill-opacity': 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"4EROewVk+2w6/hhouYsNqR3ZYyQ=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactMapGL","Source","Layer","calculateCosts","aggregateTotals","filterDataByArea","adjustCounts","jsxDEV","_jsxDEV","initialPolygon","type","coordinates","MapComponent","collisionData","onResultsUpdate","_s","viewport","setViewport","latitude","longitude","zoom","width","height","selectedArea","setSelectedArea","mapRef","handleMapClick","event","lngLat","length","lng","lat","prev","handleMapDoubleClick","filteredData","counts","INJURY","filter","row","TYPE","FATALITY","PROPERTY","formattedData","count","adjustedData","costData","totals","yearly","daily","ref","mapboxAccessToken","process","env","REACT_APP_MAPBOX_TOKEN","onViewportChange","newViewport","onClick","onDblClick","mapStyle","style","children","data","geometry","id","paint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\r\n// Define the Polygon shape in JavaScript\r\nconst initialPolygon = {\r\n  type: 'Polygon',\r\n  coordinates: [], // Array of arrays of positions\r\n};\r\n\r\nconst MapComponent = ({ collisionData, onResultsUpdate }) => {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 52.1332,\r\n    longitude: -106.6700,\r\n    zoom: 11,\r\n    width: '100%',\r\n    height: '100%',\r\n  });\r\n\r\n  const [selectedArea, setSelectedArea] = useState(initialPolygon);\r\n  const mapRef = useRef(null);\r\n\r\n  // Handle map click to start drawing a selection\r\n  const handleMapClick = useCallback((event) => {\r\n    const { lngLat } = event;\r\n    if (!selectedArea.coordinates.length) {\r\n      setSelectedArea({\r\n        type: 'Polygon',\r\n        coordinates: [[[lngLat.lng, lngLat.lat]]],\r\n      });\r\n    } else {\r\n      setSelectedArea((prev) => ({\r\n        ...prev,\r\n        coordinates: [\r\n          [\r\n            ...prev.coordinates[0],\r\n            [lngLat.lng, lngLat.lat],\r\n          ],\r\n        ],\r\n      }));\r\n    }\r\n  }, [selectedArea]);\r\n\r\n  // Handle map double-click to finish drawing the selection\r\n  const handleMapDoubleClick = useCallback(() => {\r\n    if (selectedArea.coordinates.length > 2) {\r\n      // Close the polygon\r\n      setSelectedArea((prev) => ({\r\n        ...prev,\r\n        coordinates: [\r\n          [\r\n            ...prev.coordinates[0],\r\n            [prev.coordinates[0][0][0], prev.coordinates[0][0][1]],\r\n          ],\r\n        ],\r\n      }));\r\n\r\n      // Filter collision data within the selected area\r\n      const filteredData = filterDataByArea(collisionData, selectedArea);\r\n\r\n      // Count collisions by type\r\n      const counts = {\r\n        INJURY: filteredData.filter((row) => row.TYPE === 'INJURY').length,\r\n        FATALITY: filteredData.filter((row) => row.TYPE === 'FATALITY').length,\r\n        PROPERTY: filteredData.filter((row) => row.TYPE === 'PROPERTY').length,\r\n      };\r\n\r\n      // Format the data for cost calculations\r\n      const formattedData = [\r\n        { TYPE: 'INJURY', count: counts.INJURY },\r\n        { TYPE: 'FATALITY', count: counts.FATALITY },\r\n        { TYPE: 'PROPERTY', count: counts.PROPERTY },\r\n      ];\r\n\r\n      // Calculate costs for the filtered data\r\n      const adjustedData = adjustCounts(formattedData);\r\n      const costData = calculateCosts(adjustedData);\r\n      const { totals, yearly, daily } = aggregateTotals(costData);\r\n\r\n      // Pass results to the parent component\r\n      onResultsUpdate({ totals, yearly, daily });\r\n    }\r\n  }, [selectedArea, collisionData, onResultsUpdate]);\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      ref={mapRef}\r\n      mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n      onViewportChange={(newViewport) => setViewport(newViewport)}\r\n      onClick={handleMapClick}\r\n      onDblClick={handleMapDoubleClick}\r\n      mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n      style={{ width: '100%', height: '100%' }}\r\n    >\r\n      {/* Render the selected area as a polygon on the map */}\r\n      {selectedArea.coordinates.length > 0 && (\r\n        <Source type=\"geojson\" data={{ type: 'Feature', geometry: selectedArea }}>\r\n          <Layer\r\n            id=\"selected-area\"\r\n            type=\"fill\"\r\n            paint={{\r\n              'fill-color': '#3FB1CE',\r\n              'fill-opacity': 0.5,\r\n            }}\r\n          />\r\n        </Source>\r\n      )}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}