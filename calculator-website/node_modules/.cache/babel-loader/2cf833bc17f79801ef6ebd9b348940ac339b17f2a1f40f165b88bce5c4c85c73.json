{"ast":null,"code":"import _defineProperty from \"C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n// src/geom-in.ts\nimport BigNumber2 from \"bignumber.js\";\n\n// src/constant.ts\nvar constant_default = x => {\n  return () => {\n    return x;\n  };\n};\n\n// src/compare.ts\nvar compare_default = eps => {\n  const almostEqual = eps ? (a, b) => b.minus(a).abs().isLessThanOrEqualTo(eps) : constant_default(false);\n  return (a, b) => {\n    if (almostEqual(a, b)) return 0;\n    return a.comparedTo(b);\n  };\n};\n\n// src/orient.ts\nfunction orient_default(eps) {\n  const almostCollinear = eps ? (area2, ax, ay, cx, cy) => area2.exponentiatedBy(2).isLessThanOrEqualTo(cx.minus(ax).exponentiatedBy(2).plus(cy.minus(ay).exponentiatedBy(2)).times(eps)) : constant_default(false);\n  return (a, b, c) => {\n    const ax = a.x,\n      ay = a.y,\n      cx = c.x,\n      cy = c.y;\n    const area2 = ay.minus(cy).times(b.x.minus(cx)).minus(ax.minus(cx).times(b.y.minus(cy)));\n    if (almostCollinear(area2, ax, ay, cx, cy)) return 0;\n    return area2.comparedTo(0);\n  };\n}\n\n// src/snap.ts\nimport BigNumber from \"bignumber.js\";\nimport { SplayTreeSet } from \"splaytree-ts\";\n\n// src/identity.ts\nvar identity_default = x => {\n  return x;\n};\n\n// src/snap.ts\nvar snap_default = eps => {\n  if (eps) {\n    const xTree = new SplayTreeSet(compare_default(eps));\n    const yTree = new SplayTreeSet(compare_default(eps));\n    const snapCoord = (coord, tree) => {\n      return tree.addAndReturn(coord);\n    };\n    const snap = v => {\n      return {\n        x: snapCoord(v.x, xTree),\n        y: snapCoord(v.y, yTree)\n      };\n    };\n    snap({\n      x: new BigNumber(0),\n      y: new BigNumber(0)\n    });\n    return snap;\n  }\n  return identity_default;\n};\n\n// src/precision.ts\nvar set = eps => {\n  return {\n    set: eps2 => {\n      precision = set(eps2);\n    },\n    reset: () => set(eps),\n    compare: compare_default(eps),\n    snap: snap_default(eps),\n    orient: orient_default(eps)\n  };\n};\nvar precision = set();\n\n// src/bbox.ts\nvar isInBbox = (bbox, point) => {\n  return bbox.ll.x.isLessThanOrEqualTo(point.x) && point.x.isLessThanOrEqualTo(bbox.ur.x) && bbox.ll.y.isLessThanOrEqualTo(point.y) && point.y.isLessThanOrEqualTo(bbox.ur.y);\n};\nvar getBboxOverlap = (b1, b2) => {\n  if (b2.ur.x.isLessThan(b1.ll.x) || b1.ur.x.isLessThan(b2.ll.x) || b2.ur.y.isLessThan(b1.ll.y) || b1.ur.y.isLessThan(b2.ll.y)) return null;\n  const lowerX = b1.ll.x.isLessThan(b2.ll.x) ? b2.ll.x : b1.ll.x;\n  const upperX = b1.ur.x.isLessThan(b2.ur.x) ? b1.ur.x : b2.ur.x;\n  const lowerY = b1.ll.y.isLessThan(b2.ll.y) ? b2.ll.y : b1.ll.y;\n  const upperY = b1.ur.y.isLessThan(b2.ur.y) ? b1.ur.y : b2.ur.y;\n  return {\n    ll: {\n      x: lowerX,\n      y: lowerY\n    },\n    ur: {\n      x: upperX,\n      y: upperY\n    }\n  };\n};\n\n// src/operation.ts\nimport { SplayTreeSet as SplayTreeSet3 } from \"splaytree-ts\";\n\n// src/vector.ts\nvar crossProduct = (a, b) => a.x.times(b.y).minus(a.y.times(b.x));\nvar dotProduct = (a, b) => a.x.times(b.x).plus(a.y.times(b.y));\nvar length = v => dotProduct(v, v).sqrt();\nvar sineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = {\n    x: pBase.x.minus(pShared.x),\n    y: pBase.y.minus(pShared.y)\n  };\n  const vAngle = {\n    x: pAngle.x.minus(pShared.x),\n    y: pAngle.y.minus(pShared.y)\n  };\n  return crossProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));\n};\nvar cosineOfAngle = (pShared, pBase, pAngle) => {\n  const vBase = {\n    x: pBase.x.minus(pShared.x),\n    y: pBase.y.minus(pShared.y)\n  };\n  const vAngle = {\n    x: pAngle.x.minus(pShared.x),\n    y: pAngle.y.minus(pShared.y)\n  };\n  return dotProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase));\n};\nvar horizontalIntersection = (pt, v, y) => {\n  if (v.y.isZero()) return null;\n  return {\n    x: pt.x.plus(v.x.div(v.y).times(y.minus(pt.y))),\n    y\n  };\n};\nvar verticalIntersection = (pt, v, x) => {\n  if (v.x.isZero()) return null;\n  return {\n    x,\n    y: pt.y.plus(v.y.div(v.x).times(x.minus(pt.x)))\n  };\n};\nvar intersection = (pt1, v1, pt2, v2) => {\n  if (v1.x.isZero()) return verticalIntersection(pt2, v2, pt1.x);\n  if (v2.x.isZero()) return verticalIntersection(pt1, v1, pt2.x);\n  if (v1.y.isZero()) return horizontalIntersection(pt2, v2, pt1.y);\n  if (v2.y.isZero()) return horizontalIntersection(pt1, v1, pt2.y);\n  const kross = crossProduct(v1, v2);\n  if (kross.isZero()) return null;\n  const ve = {\n    x: pt2.x.minus(pt1.x),\n    y: pt2.y.minus(pt1.y)\n  };\n  const d1 = crossProduct(ve, v1).div(kross);\n  const d2 = crossProduct(ve, v2).div(kross);\n  const x1 = pt1.x.plus(d2.times(v1.x)),\n    x2 = pt2.x.plus(d1.times(v2.x));\n  const y1 = pt1.y.plus(d2.times(v1.y)),\n    y2 = pt2.y.plus(d1.times(v2.y));\n  const x = x1.plus(x2).div(2);\n  const y = y1.plus(y2).div(2);\n  return {\n    x,\n    y\n  };\n};\n\n// src/sweep-event.ts\nvar SweepEvent = class _SweepEvent {\n  // for ordering sweep events in the sweep event queue\n  static compare(a, b) {\n    const ptCmp = _SweepEvent.comparePoints(a.point, b.point);\n    if (ptCmp !== 0) return ptCmp;\n    if (a.point !== b.point) a.link(b);\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1;\n    return Segment.compare(a.segment, b.segment);\n  }\n  // for ordering points in sweep line order\n  static comparePoints(aPt, bPt) {\n    if (aPt.x.isLessThan(bPt.x)) return -1;\n    if (aPt.x.isGreaterThan(bPt.x)) return 1;\n    if (aPt.y.isLessThan(bPt.y)) return -1;\n    if (aPt.y.isGreaterThan(bPt.y)) return 1;\n    return 0;\n  }\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor(point, isLeft) {\n    _defineProperty(this, \"point\", void 0);\n    _defineProperty(this, \"isLeft\", void 0);\n    _defineProperty(this, \"segment\", void 0);\n    _defineProperty(this, \"otherSE\", void 0);\n    _defineProperty(this, \"consumedBy\", void 0);\n    if (point.events === void 0) point.events = [this];else point.events.push(this);\n    this.point = point;\n    this.isLeft = isLeft;\n  }\n  link(other) {\n    if (other.point === this.point) {\n      throw new Error(\"Tried to link already linked events\");\n    }\n    const otherEvents = other.point.events;\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i];\n      this.point.events.push(evt);\n      evt.point = this.point;\n    }\n    this.checkForConsuming();\n  }\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming() {\n    const numEvents = this.point.events.length;\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i];\n      if (evt1.segment.consumedBy !== void 0) continue;\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j];\n        if (evt2.consumedBy !== void 0) continue;\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue;\n        evt1.segment.consume(evt2.segment);\n      }\n    }\n  }\n  getAvailableLinkedEvents() {\n    const events = [];\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i];\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt);\n      }\n    }\n    return events;\n  }\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator(baseEvent) {\n    const cache = /* @__PURE__ */new Map();\n    const fillCache = linkedEvent => {\n      const nextEvent = linkedEvent.otherSE;\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point)\n      });\n    };\n    return (a, b) => {\n      if (!cache.has(a)) fillCache(a);\n      if (!cache.has(b)) fillCache(b);\n      const {\n        sine: asine,\n        cosine: acosine\n      } = cache.get(a);\n      const {\n        sine: bsine,\n        cosine: bcosine\n      } = cache.get(b);\n      if (asine.isGreaterThanOrEqualTo(0) && bsine.isGreaterThanOrEqualTo(0)) {\n        if (acosine.isLessThan(bcosine)) return 1;\n        if (acosine.isGreaterThan(bcosine)) return -1;\n        return 0;\n      }\n      if (asine.isLessThan(0) && bsine.isLessThan(0)) {\n        if (acosine.isLessThan(bcosine)) return -1;\n        if (acosine.isGreaterThan(bcosine)) return 1;\n        return 0;\n      }\n      if (bsine.isLessThan(asine)) return -1;\n      if (bsine.isGreaterThan(asine)) return 1;\n      return 0;\n    };\n  }\n};\n\n// src/geom-out.ts\nvar RingOut = class _RingOut {\n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory(allSegments) {\n    const ringsOut = [];\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i];\n      if (!segment.isInResult() || segment.ringOut) continue;\n      let prevEvent = null;\n      let event = segment.leftSE;\n      let nextEvent = segment.rightSE;\n      const events = [event];\n      const startingPoint = event.point;\n      const intersectionLEs = [];\n      while (true) {\n        prevEvent = event;\n        event = nextEvent;\n        events.push(event);\n        if (event.point === startingPoint) break;\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents();\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point;\n            const lastPt = events[events.length - 1].point;\n            throw new Error(\"Unable to complete output ring starting at [\".concat(firstPt.x, \", \").concat(firstPt.y, \"]. Last matching segment found ends at [\").concat(lastPt.x, \", \").concat(lastPt.y, \"].\"));\n          }\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE;\n            break;\n          }\n          let indexLE = null;\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j;\n              break;\n            }\n          }\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0];\n            const ringEvents = events.splice(intersectionLE.index);\n            ringEvents.unshift(ringEvents[0].otherSE);\n            ringsOut.push(new _RingOut(ringEvents.reverse()));\n            continue;\n          }\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point\n          });\n          const comparator = event.getLeftmostComparator(prevEvent);\n          nextEvent = availableLEs.sort(comparator)[0].otherSE;\n          break;\n        }\n      }\n      ringsOut.push(new _RingOut(events));\n    }\n    return ringsOut;\n  }\n  constructor(events) {\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"poly\", void 0);\n    _defineProperty(this, \"_isExteriorRing\", void 0);\n    _defineProperty(this, \"_enclosingRing\", void 0);\n    this.events = events;\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this;\n    }\n    this.poly = null;\n  }\n  getGeom() {\n    let prevPt = this.events[0].point;\n    const points = [prevPt];\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt2 = this.events[i].point;\n      const nextPt2 = this.events[i + 1].point;\n      if (precision.orient(pt2, prevPt, nextPt2) === 0) continue;\n      points.push(pt2);\n      prevPt = pt2;\n    }\n    if (points.length === 1) return null;\n    const pt = points[0];\n    const nextPt = points[1];\n    if (precision.orient(pt, prevPt, nextPt) === 0) points.shift();\n    points.push(points[0]);\n    const step = this.isExteriorRing() ? 1 : -1;\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1;\n    const iEnd = this.isExteriorRing() ? points.length : -1;\n    const orderedPoints = [];\n    for (let i = iStart; i != iEnd; i += step) orderedPoints.push([points[i].x.toNumber(), points[i].y.toNumber()]);\n    return orderedPoints;\n  }\n  isExteriorRing() {\n    if (this._isExteriorRing === void 0) {\n      const enclosing = this.enclosingRing();\n      this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true;\n    }\n    return this._isExteriorRing;\n  }\n  enclosingRing() {\n    if (this._enclosingRing === void 0) {\n      this._enclosingRing = this._calcEnclosingRing();\n    }\n    return this._enclosingRing;\n  }\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing() {\n    let leftMostEvt = this.events[0];\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i];\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt;\n    }\n    let prevSeg = leftMostEvt.segment.prevInResult();\n    let prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n    while (true) {\n      if (!prevSeg) return null;\n      if (!prevPrevSeg) return prevSeg.ringOut;\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        var _prevPrevSeg$ringOut, _prevSeg$ringOut;\n        if (((_prevPrevSeg$ringOut = prevPrevSeg.ringOut) === null || _prevPrevSeg$ringOut === void 0 ? void 0 : _prevPrevSeg$ringOut.enclosingRing()) !== prevSeg.ringOut) {\n          return prevSeg.ringOut;\n        } else return (_prevSeg$ringOut = prevSeg.ringOut) === null || _prevSeg$ringOut === void 0 ? void 0 : _prevSeg$ringOut.enclosingRing();\n      }\n      prevSeg = prevPrevSeg.prevInResult();\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null;\n    }\n  }\n};\nvar PolyOut = class PolyOut {\n  constructor(exteriorRing) {\n    _defineProperty(this, \"exteriorRing\", void 0);\n    _defineProperty(this, \"interiorRings\", void 0);\n    this.exteriorRing = exteriorRing;\n    exteriorRing.poly = this;\n    this.interiorRings = [];\n  }\n  addInterior(ring) {\n    this.interiorRings.push(ring);\n    ring.poly = this;\n  }\n  getGeom() {\n    const geom0 = this.exteriorRing.getGeom();\n    if (geom0 === null) return null;\n    const geom = [geom0];\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom();\n      if (ringGeom === null) continue;\n      geom.push(ringGeom);\n    }\n    return geom;\n  }\n};\nvar MultiPolyOut = class MultiPolyOut {\n  constructor(rings) {\n    _defineProperty(this, \"rings\", void 0);\n    _defineProperty(this, \"polys\", void 0);\n    this.rings = rings;\n    this.polys = this._composePolys(rings);\n  }\n  getGeom() {\n    const geom = [];\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom();\n      if (polyGeom === null) continue;\n      geom.push(polyGeom);\n    }\n    return geom;\n  }\n  _composePolys(rings) {\n    const polys = [];\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i];\n      if (ring.poly) continue;\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring));else {\n        var _enclosingRing$poly;\n        const enclosingRing = ring.enclosingRing();\n        if (!(enclosingRing !== null && enclosingRing !== void 0 && enclosingRing.poly)) polys.push(new PolyOut(enclosingRing));\n        enclosingRing === null || enclosingRing === void 0 || (_enclosingRing$poly = enclosingRing.poly) === null || _enclosingRing$poly === void 0 || _enclosingRing$poly.addInterior(ring);\n      }\n    }\n    return polys;\n  }\n};\n\n// src/sweep-line.ts\nimport { SplayTreeSet as SplayTreeSet2 } from \"splaytree-ts\";\nvar SweepLine = class SweepLine {\n  constructor(queue) {\n    let comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Segment.compare;\n    _defineProperty(this, \"queue\", void 0);\n    _defineProperty(this, \"tree\", void 0);\n    _defineProperty(this, \"segments\", void 0);\n    this.queue = queue;\n    this.tree = new SplayTreeSet2(comparator);\n    this.segments = [];\n  }\n  process(event) {\n    const segment = event.segment;\n    const newEvents = [];\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.delete(event.otherSE);else this.tree.delete(segment);\n      return newEvents;\n    }\n    if (event.isLeft) this.tree.add(segment);\n    let prevSeg = segment;\n    let nextSeg = segment;\n    do {\n      prevSeg = this.tree.lastBefore(prevSeg);\n    } while (prevSeg != null && prevSeg.consumedBy != void 0);\n    do {\n      nextSeg = this.tree.firstAfter(nextSeg);\n    } while (nextSeg != null && nextSeg.consumedBy != void 0);\n    if (event.isLeft) {\n      let prevMySplitter = null;\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment);\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter;\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n      let nextMySplitter = null;\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment);\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter;\n          if (!nextSeg.isAnEndpoint(nextInter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n        let mySplitter = null;\n        if (prevMySplitter === null) mySplitter = nextMySplitter;else if (nextMySplitter === null) mySplitter = prevMySplitter;else {\n          const cmpSplitters = SweepEvent.comparePoints(prevMySplitter, nextMySplitter);\n          mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter;\n        }\n        this.queue.delete(segment.rightSE);\n        newEvents.push(segment.rightSE);\n        const newEventsFromSplit = segment.split(mySplitter);\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i]);\n        }\n      }\n      if (newEvents.length > 0) {\n        this.tree.delete(segment);\n        newEvents.push(event);\n      } else {\n        this.segments.push(segment);\n        segment.prev = prevSeg;\n      }\n    } else {\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg);\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter);\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i]);\n            }\n          }\n        }\n      }\n      this.tree.delete(segment);\n    }\n    return newEvents;\n  }\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg, pt) {\n    this.tree.delete(seg);\n    const rightSE = seg.rightSE;\n    this.queue.delete(rightSE);\n    const newEvents = seg.split(pt);\n    newEvents.push(rightSE);\n    if (seg.consumedBy === void 0) this.tree.add(seg);\n    return newEvents;\n  }\n};\n\n// src/operation.ts\nvar Operation = class Operation {\n  constructor() {\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"numMultiPolys\", void 0);\n  }\n  run(type, geom, moreGeoms) {\n    operation.type = type;\n    const multipolys = [new MultiPolyIn(geom, true)];\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      multipolys.push(new MultiPolyIn(moreGeoms[i], false));\n    }\n    operation.numMultiPolys = multipolys.length;\n    if (operation.type === \"difference\") {\n      const subject = multipolys[0];\n      let i = 1;\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++;else multipolys.splice(i, 1);\n      }\n    }\n    if (operation.type === \"intersection\") {\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i];\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return [];\n        }\n      }\n    }\n    const queue = new SplayTreeSet3(SweepEvent.compare);\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents();\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.add(sweepEvents[j]);\n      }\n    }\n    const sweepLine = new SweepLine(queue);\n    let evt = null;\n    if (queue.size != 0) {\n      evt = queue.first();\n      queue.delete(evt);\n    }\n    while (evt) {\n      const newEvents = sweepLine.process(evt);\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt2 = newEvents[i];\n        if (evt2.consumedBy === void 0) queue.add(evt2);\n      }\n      if (queue.size != 0) {\n        evt = queue.first();\n        queue.delete(evt);\n      } else {\n        evt = null;\n      }\n    }\n    precision.reset();\n    const ringsOut = RingOut.factory(sweepLine.segments);\n    const result = new MultiPolyOut(ringsOut);\n    return result.getGeom();\n  }\n};\nvar operation = new Operation();\nvar operation_default = operation;\n\n// src/segment.ts\nvar segmentId = 0;\nvar Segment = class _Segment {\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare(a, b) {\n    const alx = a.leftSE.point.x;\n    const blx = b.leftSE.point.x;\n    const arx = a.rightSE.point.x;\n    const brx = b.rightSE.point.x;\n    if (brx.isLessThan(alx)) return 1;\n    if (arx.isLessThan(blx)) return -1;\n    const aly = a.leftSE.point.y;\n    const bly = b.leftSE.point.y;\n    const ary = a.rightSE.point.y;\n    const bry = b.rightSE.point.y;\n    if (alx.isLessThan(blx)) {\n      if (bly.isLessThan(aly) && bly.isLessThan(ary)) return 1;\n      if (bly.isGreaterThan(aly) && bly.isGreaterThan(ary)) return -1;\n      const aCmpBLeft = a.comparePoint(b.leftSE.point);\n      if (aCmpBLeft < 0) return 1;\n      if (aCmpBLeft > 0) return -1;\n      const bCmpARight = b.comparePoint(a.rightSE.point);\n      if (bCmpARight !== 0) return bCmpARight;\n      return -1;\n    }\n    if (alx.isGreaterThan(blx)) {\n      if (aly.isLessThan(bly) && aly.isLessThan(bry)) return -1;\n      if (aly.isGreaterThan(bly) && aly.isGreaterThan(bry)) return 1;\n      const bCmpALeft = b.comparePoint(a.leftSE.point);\n      if (bCmpALeft !== 0) return bCmpALeft;\n      const aCmpBRight = a.comparePoint(b.rightSE.point);\n      if (aCmpBRight < 0) return 1;\n      if (aCmpBRight > 0) return -1;\n      return 1;\n    }\n    if (aly.isLessThan(bly)) return -1;\n    if (aly.isGreaterThan(bly)) return 1;\n    if (arx.isLessThan(brx)) {\n      const bCmpARight = b.comparePoint(a.rightSE.point);\n      if (bCmpARight !== 0) return bCmpARight;\n    }\n    if (arx.isGreaterThan(brx)) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point);\n      if (aCmpBRight < 0) return 1;\n      if (aCmpBRight > 0) return -1;\n    }\n    if (!arx.eq(brx)) {\n      const ay = ary.minus(aly);\n      const ax = arx.minus(alx);\n      const by = bry.minus(bly);\n      const bx = brx.minus(blx);\n      if (ay.isGreaterThan(ax) && by.isLessThan(bx)) return 1;\n      if (ay.isLessThan(ax) && by.isGreaterThan(bx)) return -1;\n    }\n    if (arx.isGreaterThan(brx)) return 1;\n    if (arx.isLessThan(brx)) return -1;\n    if (ary.isLessThan(bry)) return -1;\n    if (ary.isGreaterThan(bry)) return 1;\n    if (a.id < b.id) return -1;\n    if (a.id > b.id) return 1;\n    return 0;\n  }\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor(leftSE, rightSE, rings, windings) {\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"leftSE\", void 0);\n    _defineProperty(this, \"rightSE\", void 0);\n    _defineProperty(this, \"rings\", void 0);\n    _defineProperty(this, \"windings\", void 0);\n    _defineProperty(this, \"ringOut\", void 0);\n    _defineProperty(this, \"consumedBy\", void 0);\n    _defineProperty(this, \"prev\", void 0);\n    _defineProperty(this, \"_prevInResult\", void 0);\n    _defineProperty(this, \"_beforeState\", void 0);\n    _defineProperty(this, \"_afterState\", void 0);\n    _defineProperty(this, \"_isInResult\", void 0);\n    this.id = ++segmentId;\n    this.leftSE = leftSE;\n    leftSE.segment = this;\n    leftSE.otherSE = rightSE;\n    this.rightSE = rightSE;\n    rightSE.segment = this;\n    rightSE.otherSE = leftSE;\n    this.rings = rings;\n    this.windings = windings;\n  }\n  static fromRing(pt1, pt2, ring) {\n    let leftPt, rightPt, winding;\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2);\n    if (cmpPts < 0) {\n      leftPt = pt1;\n      rightPt = pt2;\n      winding = 1;\n    } else if (cmpPts > 0) {\n      leftPt = pt2;\n      rightPt = pt1;\n      winding = -1;\n    } else throw new Error(\"Tried to create degenerate segment at [\".concat(pt1.x, \", \").concat(pt1.y, \"]\"));\n    const leftSE = new SweepEvent(leftPt, true);\n    const rightSE = new SweepEvent(rightPt, false);\n    return new _Segment(leftSE, rightSE, [ring], [winding]);\n  }\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE(newRightSE) {\n    this.rightSE = newRightSE;\n    this.rightSE.segment = this;\n    this.rightSE.otherSE = this.leftSE;\n    this.leftSE.otherSE = this.rightSE;\n  }\n  bbox() {\n    const y1 = this.leftSE.point.y;\n    const y2 = this.rightSE.point.y;\n    return {\n      ll: {\n        x: this.leftSE.point.x,\n        y: y1.isLessThan(y2) ? y1 : y2\n      },\n      ur: {\n        x: this.rightSE.point.x,\n        y: y1.isGreaterThan(y2) ? y1 : y2\n      }\n    };\n  }\n  /* A vector from the left point to the right */\n  vector() {\n    return {\n      x: this.rightSE.point.x.minus(this.leftSE.point.x),\n      y: this.rightSE.point.y.minus(this.leftSE.point.y)\n    };\n  }\n  isAnEndpoint(pt) {\n    return pt.x.eq(this.leftSE.point.x) && pt.y.eq(this.leftSE.point.y) || pt.x.eq(this.rightSE.point.x) && pt.y.eq(this.rightSE.point.y);\n  }\n  /* Compare this segment with a point.\n   *\n   * A point P is considered to be colinear to a segment if there\n   * exists a distance D such that if we travel along the segment\n   * from one * endpoint towards the other a distance D, we find\n   * ourselves at point P.\n   *\n   * Return value indicates:\n   *\n   *   1: point lies above the segment (to the left of vertical)\n   *   0: point is colinear to segment\n   *  -1: point lies below the segment (to the right of vertical)\n   */\n  comparePoint(point) {\n    return precision.orient(this.leftSE.point, point, this.rightSE.point);\n  }\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection(other) {\n    const tBbox = this.bbox();\n    const oBbox = other.bbox();\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox);\n    if (bboxOverlap === null) return null;\n    const tlp = this.leftSE.point;\n    const trp = this.rightSE.point;\n    const olp = other.leftSE.point;\n    const orp = other.rightSE.point;\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0;\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0;\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0;\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0;\n    if (touchesThisLSE && touchesOtherLSE) {\n      if (touchesThisRSE && !touchesOtherRSE) return trp;\n      if (!touchesThisRSE && touchesOtherRSE) return orp;\n      return null;\n    }\n    if (touchesThisLSE) {\n      if (touchesOtherRSE) {\n        if (tlp.x.eq(orp.x) && tlp.y.eq(orp.y)) return null;\n      }\n      return tlp;\n    }\n    if (touchesOtherLSE) {\n      if (touchesThisRSE) {\n        if (trp.x.eq(olp.x) && trp.y.eq(olp.y)) return null;\n      }\n      return olp;\n    }\n    if (touchesThisRSE && touchesOtherRSE) return null;\n    if (touchesThisRSE) return trp;\n    if (touchesOtherRSE) return orp;\n    const pt = intersection(tlp, this.vector(), olp, other.vector());\n    if (pt === null) return null;\n    if (!isInBbox(bboxOverlap, pt)) return null;\n    return precision.snap(pt);\n  }\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split(point) {\n    const newEvents = [];\n    const alreadyLinked = point.events !== void 0;\n    const newLeftSE = new SweepEvent(point, true);\n    const newRightSE = new SweepEvent(point, false);\n    const oldRightSE = this.rightSE;\n    this.replaceRightSE(newRightSE);\n    newEvents.push(newRightSE);\n    newEvents.push(newLeftSE);\n    const newSeg = new _Segment(newLeftSE, oldRightSE, this.rings.slice(), this.windings.slice());\n    if (SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0) {\n      newSeg.swapEvents();\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents();\n    }\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming();\n      newRightSE.checkForConsuming();\n    }\n    return newEvents;\n  }\n  /* Swap which event is left and right */\n  swapEvents() {\n    const tmpEvt = this.rightSE;\n    this.rightSE = this.leftSE;\n    this.leftSE = tmpEvt;\n    this.leftSE.isLeft = true;\n    this.rightSE.isLeft = false;\n    for (let i = 0, iMax = this.windings.length; i < iMax; i++) {\n      this.windings[i] *= -1;\n    }\n  }\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume(other) {\n    let consumer = this;\n    let consumee = other;\n    while (consumer.consumedBy) consumer = consumer.consumedBy;\n    while (consumee.consumedBy) consumee = consumee.consumedBy;\n    const cmp = _Segment.compare(consumer, consumee);\n    if (cmp === 0) return;\n    if (cmp > 0) {\n      const tmp = consumer;\n      consumer = consumee;\n      consumee = tmp;\n    }\n    if (consumer.prev === consumee) {\n      const tmp = consumer;\n      consumer = consumee;\n      consumee = tmp;\n    }\n    for (let i = 0, iMax = consumee.rings.length; i < iMax; i++) {\n      const ring = consumee.rings[i];\n      const winding = consumee.windings[i];\n      const index = consumer.rings.indexOf(ring);\n      if (index === -1) {\n        consumer.rings.push(ring);\n        consumer.windings.push(winding);\n      } else consumer.windings[index] += winding;\n    }\n    consumee.rings = null;\n    consumee.windings = null;\n    consumee.consumedBy = consumer;\n    consumee.leftSE.consumedBy = consumer.leftSE;\n    consumee.rightSE.consumedBy = consumer.rightSE;\n  }\n  /* The first segment previous segment chain that is in the result */\n  prevInResult() {\n    if (this._prevInResult !== void 0) return this._prevInResult;\n    if (!this.prev) this._prevInResult = null;else if (this.prev.isInResult()) this._prevInResult = this.prev;else this._prevInResult = this.prev.prevInResult();\n    return this._prevInResult;\n  }\n  beforeState() {\n    if (this._beforeState !== void 0) return this._beforeState;\n    if (!this.prev) this._beforeState = {\n      rings: [],\n      windings: [],\n      multiPolys: []\n    };else {\n      const seg = this.prev.consumedBy || this.prev;\n      this._beforeState = seg.afterState();\n    }\n    return this._beforeState;\n  }\n  afterState() {\n    if (this._afterState !== void 0) return this._afterState;\n    const beforeState = this.beforeState();\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: []\n    };\n    const ringsAfter = this._afterState.rings;\n    const windingsAfter = this._afterState.windings;\n    const mpsAfter = this._afterState.multiPolys;\n    for (let i = 0, iMax = this.rings.length; i < iMax; i++) {\n      const ring = this.rings[i];\n      const winding = this.windings[i];\n      const index = ringsAfter.indexOf(ring);\n      if (index === -1) {\n        ringsAfter.push(ring);\n        windingsAfter.push(winding);\n      } else windingsAfter[index] += winding;\n    }\n    const polysAfter = [];\n    const polysExclude = [];\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue;\n      const ring = ringsAfter[i];\n      const poly = ring.poly;\n      if (polysExclude.indexOf(poly) !== -1) continue;\n      if (ring.isExterior) polysAfter.push(poly);else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly);\n        const index = polysAfter.indexOf(ring.poly);\n        if (index !== -1) polysAfter.splice(index, 1);\n      }\n    }\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly;\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp);\n    }\n    return this._afterState;\n  }\n  /* Is this segment part of the final result? */\n  isInResult() {\n    if (this.consumedBy) return false;\n    if (this._isInResult !== void 0) return this._isInResult;\n    const mpsBefore = this.beforeState().multiPolys;\n    const mpsAfter = this.afterState().multiPolys;\n    switch (operation_default.type) {\n      case \"union\":\n        {\n          const noBefores = mpsBefore.length === 0;\n          const noAfters = mpsAfter.length === 0;\n          this._isInResult = noBefores !== noAfters;\n          break;\n        }\n      case \"intersection\":\n        {\n          let least;\n          let most;\n          if (mpsBefore.length < mpsAfter.length) {\n            least = mpsBefore.length;\n            most = mpsAfter.length;\n          } else {\n            least = mpsAfter.length;\n            most = mpsBefore.length;\n          }\n          this._isInResult = most === operation_default.numMultiPolys && least < most;\n          break;\n        }\n      case \"xor\":\n        {\n          const diff = Math.abs(mpsBefore.length - mpsAfter.length);\n          this._isInResult = diff % 2 === 1;\n          break;\n        }\n      case \"difference\":\n        {\n          const isJustSubject = mps => mps.length === 1 && mps[0].isSubject;\n          this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter);\n          break;\n        }\n    }\n    return this._isInResult;\n  }\n};\n\n// src/geom-in.ts\nvar RingIn = class RingIn {\n  constructor(geomRing, poly, isExterior) {\n    _defineProperty(this, \"poly\", void 0);\n    _defineProperty(this, \"isExterior\", void 0);\n    _defineProperty(this, \"segments\", void 0);\n    _defineProperty(this, \"bbox\", void 0);\n    if (!Array.isArray(geomRing) || geomRing.length === 0) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    this.poly = poly;\n    this.isExterior = isExterior;\n    this.segments = [];\n    if (typeof geomRing[0][0] !== \"number\" || typeof geomRing[0][1] !== \"number\") {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    const firstPoint = precision.snap({\n      x: new BigNumber2(geomRing[0][0]),\n      y: new BigNumber2(geomRing[0][1])\n    });\n    this.bbox = {\n      ll: {\n        x: firstPoint.x,\n        y: firstPoint.y\n      },\n      ur: {\n        x: firstPoint.x,\n        y: firstPoint.y\n      }\n    };\n    let prevPoint = firstPoint;\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      if (typeof geomRing[i][0] !== \"number\" || typeof geomRing[i][1] !== \"number\") {\n        throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n      }\n      const point = precision.snap({\n        x: new BigNumber2(geomRing[i][0]),\n        y: new BigNumber2(geomRing[i][1])\n      });\n      if (point.x.eq(prevPoint.x) && point.y.eq(prevPoint.y)) continue;\n      this.segments.push(Segment.fromRing(prevPoint, point, this));\n      if (point.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = point.x;\n      if (point.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = point.y;\n      if (point.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = point.x;\n      if (point.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = point.y;\n      prevPoint = point;\n    }\n    if (!firstPoint.x.eq(prevPoint.x) || !firstPoint.y.eq(prevPoint.y)) {\n      this.segments.push(Segment.fromRing(prevPoint, firstPoint, this));\n    }\n  }\n  getSweepEvents() {\n    const sweepEvents = [];\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i];\n      sweepEvents.push(segment.leftSE);\n      sweepEvents.push(segment.rightSE);\n    }\n    return sweepEvents;\n  }\n};\nvar PolyIn = class PolyIn {\n  constructor(geomPoly, multiPoly) {\n    _defineProperty(this, \"multiPoly\", void 0);\n    _defineProperty(this, \"exteriorRing\", void 0);\n    _defineProperty(this, \"interiorRings\", void 0);\n    _defineProperty(this, \"bbox\", void 0);\n    if (!Array.isArray(geomPoly)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    this.exteriorRing = new RingIn(geomPoly[0], this, true);\n    this.bbox = {\n      ll: {\n        x: this.exteriorRing.bbox.ll.x,\n        y: this.exteriorRing.bbox.ll.y\n      },\n      ur: {\n        x: this.exteriorRing.bbox.ur.x,\n        y: this.exteriorRing.bbox.ur.y\n      }\n    };\n    this.interiorRings = [];\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false);\n      if (ring.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = ring.bbox.ll.x;\n      if (ring.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = ring.bbox.ll.y;\n      if (ring.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = ring.bbox.ur.x;\n      if (ring.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = ring.bbox.ur.y;\n      this.interiorRings.push(ring);\n    }\n    this.multiPoly = multiPoly;\n  }\n  getSweepEvents() {\n    const sweepEvents = this.exteriorRing.getSweepEvents();\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents();\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j]);\n      }\n    }\n    return sweepEvents;\n  }\n};\nvar MultiPolyIn = class MultiPolyIn {\n  constructor(geom, isSubject) {\n    _defineProperty(this, \"isSubject\", void 0);\n    _defineProperty(this, \"polys\", void 0);\n    _defineProperty(this, \"bbox\", void 0);\n    if (!Array.isArray(geom)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\");\n    }\n    try {\n      if (typeof geom[0][0][0] === \"number\") geom = [geom];\n    } catch (ex) {}\n    this.polys = [];\n    this.bbox = {\n      ll: {\n        x: new BigNumber2(Number.POSITIVE_INFINITY),\n        y: new BigNumber2(Number.POSITIVE_INFINITY)\n      },\n      ur: {\n        x: new BigNumber2(Number.NEGATIVE_INFINITY),\n        y: new BigNumber2(Number.NEGATIVE_INFINITY)\n      }\n    };\n    for (let i = 0, iMax = geom.length; i < iMax; i++) {\n      const poly = new PolyIn(geom[i], this);\n      if (poly.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = poly.bbox.ll.x;\n      if (poly.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = poly.bbox.ll.y;\n      if (poly.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = poly.bbox.ur.x;\n      if (poly.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = poly.bbox.ur.y;\n      this.polys.push(poly);\n    }\n    this.isSubject = isSubject;\n  }\n  getSweepEvents() {\n    const sweepEvents = [];\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents();\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j]);\n      }\n    }\n    return sweepEvents;\n  }\n};\n\n// src/index.ts\nvar union = function (geom) {\n  for (var _len = arguments.length, moreGeoms = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    moreGeoms[_key - 1] = arguments[_key];\n  }\n  return operation_default.run(\"union\", geom, moreGeoms);\n};\nvar intersection2 = function (geom) {\n  for (var _len2 = arguments.length, moreGeoms = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    moreGeoms[_key2 - 1] = arguments[_key2];\n  }\n  return operation_default.run(\"intersection\", geom, moreGeoms);\n};\nvar xor = function (geom) {\n  for (var _len3 = arguments.length, moreGeoms = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    moreGeoms[_key3 - 1] = arguments[_key3];\n  }\n  return operation_default.run(\"xor\", geom, moreGeoms);\n};\nvar difference = function (geom) {\n  for (var _len4 = arguments.length, moreGeoms = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    moreGeoms[_key4 - 1] = arguments[_key4];\n  }\n  return operation_default.run(\"difference\", geom, moreGeoms);\n};\nvar setPrecision = precision.set;\nexport { difference, intersection2 as intersection, setPrecision, union, xor };","map":{"version":3,"names":["BigNumber2","constant_default","x","compare_default","eps","almostEqual","a","b","minus","abs","isLessThanOrEqualTo","comparedTo","orient_default","almostCollinear","area2","ax","ay","cx","cy","exponentiatedBy","plus","times","c","y","BigNumber","SplayTreeSet","identity_default","snap_default","xTree","yTree","snapCoord","coord","tree","addAndReturn","snap","v","set","eps2","precision","reset","compare","orient","isInBbox","bbox","point","ll","ur","getBboxOverlap","b1","b2","isLessThan","lowerX","upperX","lowerY","upperY","SplayTreeSet3","crossProduct","dotProduct","length","sqrt","sineOfAngle","pShared","pBase","pAngle","vBase","vAngle","div","cosineOfAngle","horizontalIntersection","pt","isZero","verticalIntersection","intersection","pt1","v1","pt2","v2","kross","ve","d1","d2","x1","x2","y1","y2","SweepEvent","_SweepEvent","ptCmp","comparePoints","link","isLeft","Segment","segment","aPt","bPt","isGreaterThan","constructor","_defineProperty","events","push","other","Error","otherEvents","i","iMax","evt","checkForConsuming","numEvents","evt1","consumedBy","j","evt2","otherSE","consume","getAvailableLinkedEvents","ringOut","isInResult","getLeftmostComparator","baseEvent","cache","Map","fillCache","linkedEvent","nextEvent","sine","cosine","has","asine","acosine","get","bsine","bcosine","isGreaterThanOrEqualTo","RingOut","_RingOut","factory","allSegments","ringsOut","prevEvent","event","leftSE","rightSE","startingPoint","intersectionLEs","availableLEs","firstPt","lastPt","concat","indexLE","jMax","intersectionLE","splice","ringEvents","index","unshift","reverse","comparator","sort","poly","getGeom","prevPt","points","nextPt2","nextPt","shift","step","isExteriorRing","iStart","iEnd","orderedPoints","toNumber","_isExteriorRing","enclosing","enclosingRing","_enclosingRing","_calcEnclosingRing","leftMostEvt","prevSeg","prevInResult","prevPrevSeg","_prevPrevSeg$ringOut","_prevSeg$ringOut","PolyOut","exteriorRing","interiorRings","addInterior","ring","geom0","geom","ringGeom","MultiPolyOut","rings","polys","_composePolys","polyGeom","_enclosingRing$poly","SplayTreeSet2","SweepLine","queue","arguments","undefined","segments","process","newEvents","delete","add","nextSeg","lastBefore","firstAfter","prevMySplitter","prevInter","getIntersection","isAnEndpoint","newEventsFromSplit","_splitSafely","nextMySplitter","nextInter","mySplitter","cmpSplitters","split","prev","inter","seg","Operation","run","type","moreGeoms","operation","multipolys","MultiPolyIn","numMultiPolys","subject","mpA","sweepEvents","getSweepEvents","sweepLine","size","first","result","operation_default","segmentId","_Segment","alx","blx","arx","brx","aly","bly","ary","bry","aCmpBLeft","comparePoint","bCmpARight","bCmpALeft","aCmpBRight","eq","by","bx","id","windings","fromRing","leftPt","rightPt","winding","cmpPts","replaceRightSE","newRightSE","vector","tBbox","oBbox","bboxOverlap","tlp","trp","olp","orp","touchesOtherLSE","touchesThisLSE","touchesOtherRSE","touchesThisRSE","alreadyLinked","newLeftSE","oldRightSE","newSeg","slice","swapEvents","tmpEvt","consumer","consumee","cmp","tmp","indexOf","_prevInResult","beforeState","_beforeState","multiPolys","afterState","_afterState","ringsAfter","windingsAfter","mpsAfter","polysAfter","polysExclude","isExterior","mp","multiPoly","_isInResult","mpsBefore","noBefores","noAfters","least","most","diff","Math","isJustSubject","mps","isSubject","RingIn","geomRing","Array","isArray","firstPoint","prevPoint","PolyIn","geomPoly","ringSweepEvents","ex","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","polySweepEvents","union","_len","_key","intersection2","_len2","_key2","xor","_len3","_key3","difference","_len4","_key4","setPrecision"],"sources":["C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\geom-in.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\constant.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\compare.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\orient.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\snap.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\identity.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\precision.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\bbox.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\operation.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\vector.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\sweep-event.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\geom-out.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\sweep-line.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\segment.ts","C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\polyclip-ts\\src\\index.ts"],"sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { Bbox } from \"./bbox.js\";\nimport { precision } from \"./precision.js\";\nimport Segment from \"./segment.js\";\nimport { Point } from \"./sweep-event.js\";\n\nexport type Ring = [number, number][]\nexport type Poly = Ring[]\nexport type MultiPoly = Poly[]\nexport type Geom = Poly | MultiPoly\n\nexport class RingIn {\n  poly: PolyIn\n  isExterior: boolean\n  segments: Segment[]\n  bbox: Bbox\n\n  constructor(geomRing: Ring, poly: PolyIn, isExterior: boolean) {\n    if (!Array.isArray(geomRing) || geomRing.length === 0) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    this.poly = poly\n    this.isExterior = isExterior\n    this.segments = []\n\n    if (\n      typeof geomRing[0][0] !== \"number\" ||\n      typeof geomRing[0][1] !== \"number\"\n    ) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    const firstPoint = precision.snap({ x: new BigNumber(geomRing[0][0]), y: new BigNumber(geomRing[0][1]) }) as Point\n    this.bbox = {\n      ll: { x: firstPoint.x, y: firstPoint.y },\n      ur: { x: firstPoint.x, y: firstPoint.y },\n    }\n\n    let prevPoint = firstPoint\n    for (let i = 1, iMax = geomRing.length; i < iMax; i++) {\n      if (\n        typeof geomRing[i][0] !== \"number\" ||\n        typeof geomRing[i][1] !== \"number\"\n      ) {\n        throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n      }\n      const point = precision.snap({ x: new BigNumber(geomRing[i][0]), y: new BigNumber(geomRing[i][1]) }) as Point\n      // skip repeated points\n      if (point.x.eq(prevPoint.x) && point.y.eq(prevPoint.y)) continue\n      this.segments.push(Segment.fromRing(prevPoint, point, this))\n      if (point.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = point.x\n      if (point.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = point.y\n      if (point.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = point.x\n      if (point.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = point.y\n      prevPoint = point\n    }\n    // add segment from last to first if last is not the same as first\n    if (!firstPoint.x.eq(prevPoint.x) || !firstPoint.y.eq(prevPoint.y)) {\n      this.segments.push(Segment.fromRing(prevPoint, firstPoint, this))\n    }\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.segments.length; i < iMax; i++) {\n      const segment = this.segments[i]\n      sweepEvents.push(segment.leftSE)\n      sweepEvents.push(segment.rightSE)\n    }\n    return sweepEvents\n  }\n}\n\nexport class PolyIn {\n  multiPoly: MultiPolyIn\n  exteriorRing: RingIn\n  interiorRings: RingIn[]\n  bbox: Bbox\n\n  constructor(geomPoly: Poly, multiPoly: MultiPolyIn) {\n    if (!Array.isArray(geomPoly)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n    this.exteriorRing = new RingIn(geomPoly[0], this, true)\n    // copy by value\n    this.bbox = {\n      ll: { x: this.exteriorRing.bbox.ll.x, y: this.exteriorRing.bbox.ll.y },\n      ur: { x: this.exteriorRing.bbox.ur.x, y: this.exteriorRing.bbox.ur.y },\n    }\n    this.interiorRings = []\n    for (let i = 1, iMax = geomPoly.length; i < iMax; i++) {\n      const ring = new RingIn(geomPoly[i], this, false)\n      if (ring.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = ring.bbox.ll.x\n      if (ring.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = ring.bbox.ll.y\n      if (ring.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = ring.bbox.ur.x\n      if (ring.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = ring.bbox.ur.y\n      this.interiorRings.push(ring)\n    }\n    this.multiPoly = multiPoly\n  }\n\n  getSweepEvents() {\n    const sweepEvents = this.exteriorRing.getSweepEvents()\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringSweepEvents = this.interiorRings[i].getSweepEvents()\n      for (let j = 0, jMax = ringSweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(ringSweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n\nexport class MultiPolyIn {\n  isSubject: boolean\n  polys: PolyIn[]\n  bbox: Bbox\n\n  constructor(geom: Geom, isSubject: boolean) {\n    if (!Array.isArray(geom)) {\n      throw new Error(\"Input geometry is not a valid Polygon or MultiPolygon\")\n    }\n\n    try {\n      // if the input looks like a polygon, convert it to a multipolygon\n      if (typeof geom[0][0][0] === \"number\") geom = [geom as Poly]\n    } catch (ex) {\n      // The input is either malformed or has empty arrays.\n      // In either case, it will be handled later on.\n    }\n\n    this.polys = []\n    this.bbox = {\n      ll: { x: new BigNumber(Number.POSITIVE_INFINITY), y: new BigNumber(Number.POSITIVE_INFINITY) },\n      ur: { x: new BigNumber(Number.NEGATIVE_INFINITY), y: new BigNumber(Number.NEGATIVE_INFINITY) },\n    }\n    for (let i = 0, iMax = geom.length; i < iMax; i++) {\n      const poly = new PolyIn(geom[i] as Poly, this)\n      if (poly.bbox.ll.x.isLessThan(this.bbox.ll.x)) this.bbox.ll.x = poly.bbox.ll.x\n      if (poly.bbox.ll.y.isLessThan(this.bbox.ll.y)) this.bbox.ll.y = poly.bbox.ll.y\n      if (poly.bbox.ur.x.isGreaterThan(this.bbox.ur.x)) this.bbox.ur.x = poly.bbox.ur.x\n      if (poly.bbox.ur.y.isGreaterThan(this.bbox.ur.y)) this.bbox.ur.y = poly.bbox.ur.y\n      this.polys.push(poly)\n    }\n    this.isSubject = isSubject\n  }\n\n  getSweepEvents() {\n    const sweepEvents = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polySweepEvents = this.polys[i].getSweepEvents()\n      for (let j = 0, jMax = polySweepEvents.length; j < jMax; j++) {\n        sweepEvents.push(polySweepEvents[j])\n      }\n    }\n    return sweepEvents\n  }\n}\n","export default <T>(x: T) => {\n    return () => {\n        return x\n    }\n}","import BigNumber from \"bignumber.js\"\nimport constant from \"./constant.js\"\n\nexport default (eps?: number) => {\n    const almostEqual = eps ? (a: BigNumber, b: BigNumber) =>\n        b.minus(a).abs().isLessThanOrEqualTo(eps)\n        : constant(false)\n\n    return (a: BigNumber, b: BigNumber) => {\n        if (almostEqual(a, b)) return 0\n\n        return a.comparedTo(b)\n    }\n}","import BigNumber from \"bignumber.js\";\nimport constant from \"./constant.js\";\nimport { Vector } from \"./vector.js\";\n\nexport default function (eps?: number) {\n    const almostCollinear = eps ? (area2: BigNumber, ax: BigNumber, ay: BigNumber, cx: BigNumber, cy: BigNumber) =>\n        area2.exponentiatedBy(2).isLessThanOrEqualTo(\n            cx.minus(ax).exponentiatedBy(2).plus(cy.minus(ay).exponentiatedBy(2))\n                .times(eps))\n        : constant(false)\n\n    return (a: Vector, b: Vector, c: Vector) => {\n        const ax = a.x, ay = a.y, cx = c.x, cy = c.y\n\n        const area2 = ay.minus(cy).times(b.x.minus(cx)).minus(ax.minus(cx).times(b.y.minus(cy)))\n\n        if (almostCollinear(area2, ax, ay, cx, cy)) return 0\n\n        return area2.comparedTo(0)\n    }\n}","import BigNumber from \"bignumber.js\";\nimport { SplayTreeSet } from \"splaytree-ts\"\nimport compare from \"./compare.js\";\nimport identity from \"./identity.js\";\nimport { Vector } from \"./vector.js\";\n\nexport default (eps?: number) => {\n  if (eps) {\n\n    const xTree = new SplayTreeSet(compare(eps))\n    const yTree = new SplayTreeSet(compare(eps))\n\n    const snapCoord = (coord: BigNumber, tree: SplayTreeSet<BigNumber>) => {\n      return tree.addAndReturn(coord)\n    }\n\n    const snap = (v: Vector) => {\n      return {\n        x: snapCoord(v.x, xTree),\n        y: snapCoord(v.y, yTree),\n      } as Vector\n    }\n\n    snap({ x: new BigNumber(0), y: new BigNumber(0)})\n\n    return snap\n  }\n\n  return identity<Vector>\n}","export default <T>(x: T) => {\n    return x;\n}","import compare from \"./compare.js\";\nimport orient from \"./orient.js\";\nimport snap from \"./snap.js\";\n\nconst set = (eps?: number) => {\n    return {\n        set: (eps?: number) => { precision = set(eps) },\n        reset: () => set(eps),\n        compare: compare(eps),\n        snap: snap(eps),\n        orient: orient(eps)\n    }\n}\n\nexport let precision: ReturnType<typeof set> = set()","import { Vector } from \"./vector.js\";\n\nexport interface Bbox {\n  ll: Vector;\n  ur: Vector;\n}\n\n/**\n * A bounding box has the format:\n *\n *  { ll: { x: xmin, y: ymin }, ur: { x: xmax, y: ymax } }\n *\n */\n\nexport const isInBbox = (bbox: Bbox, point: Vector) => {\n  return (\n    bbox.ll.x.isLessThanOrEqualTo(point.x) &&\n    point.x.isLessThanOrEqualTo(bbox.ur.x) &&\n    bbox.ll.y.isLessThanOrEqualTo(point.y) &&\n    point.y.isLessThanOrEqualTo(bbox.ur.y) \n  )\n}\n\n/* Returns either null, or a bbox (aka an ordered pair of points)\n * If there is only one point of overlap, a bbox with identical points\n * will be returned */\nexport const getBboxOverlap = (b1: Bbox, b2: Bbox) => {\n  // check if the bboxes overlap at all\n  if (\n    b2.ur.x.isLessThan(b1.ll.x) ||\n    b1.ur.x.isLessThan(b2.ll.x) ||\n    b2.ur.y.isLessThan(b1.ll.y) ||\n    b1.ur.y.isLessThan(b2.ll.y) \n  )\n    return null\n\n  // find the middle two X values\n  const lowerX = b1.ll.x.isLessThan(b2.ll.x) ? b2.ll.x : b1.ll.x\n  const upperX = b1.ur.x.isLessThan(b2.ur.x) ? b1.ur.x : b2.ur.x\n\n  // find the middle two Y values\n  const lowerY = b1.ll.y.isLessThan(b2.ll.y) ? b2.ll.y : b1.ll.y\n  const upperY = b1.ur.y.isLessThan(b2.ur.y) ? b1.ur.y : b2.ur.y\n\n  // put those middle values together to get the overlap\n  return { ll: { x: lowerX, y: lowerY }, ur: { x: upperX, y: upperY } } as Bbox\n}\n","import { SplayTreeSet } from \"splaytree-ts\"\nimport { getBboxOverlap } from \"./bbox.js\"\nimport * as geomIn from \"./geom-in.js\"\nimport { Geom } from \"./geom-in.js\"\nimport * as geomOut from \"./geom-out.js\"\nimport { precision } from \"./precision.js\"\nimport SweepEvent from \"./sweep-event.js\"\nimport SweepLine from \"./sweep-line.js\"\n\nexport class Operation {\n  type!: string\n  numMultiPolys!: number\n\n  run(type: string, geom: Geom, moreGeoms: Geom[]) {\n    operation.type = type\n\n    /* Convert inputs to MultiPoly objects */\n    const multipolys = [new geomIn.MultiPolyIn(geom, true)]\n    for (let i = 0, iMax = moreGeoms.length; i < iMax; i++) {\n      multipolys.push(new geomIn.MultiPolyIn(moreGeoms[i], false))\n    }\n    operation.numMultiPolys = multipolys.length\n\n    /* BBox optimization for difference operation\n     * If the bbox of a multipolygon that's part of the clipping doesn't\n     * intersect the bbox of the subject at all, we can just drop that\n     * multiploygon. */\n    if (operation.type === \"difference\") {\n      // in place removal\n      const subject = multipolys[0]\n      let i = 1\n      while (i < multipolys.length) {\n        if (getBboxOverlap(multipolys[i].bbox, subject.bbox) !== null) i++\n        else multipolys.splice(i, 1)\n      }\n    }\n\n    /* BBox optimization for intersection operation\n     * If we can find any pair of multipolygons whose bbox does not overlap,\n     * then the result will be empty. */\n    if (operation.type === \"intersection\") {\n      // TODO: this is O(n^2) in number of polygons. By sorting the bboxes,\n      //       it could be optimized to O(n * ln(n))\n      for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n        const mpA = multipolys[i]\n        for (let j = i + 1, jMax = multipolys.length; j < jMax; j++) {\n          if (getBboxOverlap(mpA.bbox, multipolys[j].bbox) === null) return []\n        }\n      }\n    }\n\n    /* Put segment endpoints in a priority queue */\n    const queue = new SplayTreeSet(SweepEvent.compare)\n    for (let i = 0, iMax = multipolys.length; i < iMax; i++) {\n      const sweepEvents = multipolys[i].getSweepEvents()\n      for (let j = 0, jMax = sweepEvents.length; j < jMax; j++) {\n        queue.add(sweepEvents[j])\n      }\n    }\n\n    /* Pass the sweep line over those endpoints */\n    const sweepLine = new SweepLine(queue)\n    let evt = null\n    if (queue.size != 0) {\n      evt = queue.first()\n      queue.delete(evt)\n    }\n    while (evt) {\n      const newEvents = sweepLine.process(evt)\n      for (let i = 0, iMax = newEvents.length; i < iMax; i++) {\n        const evt = newEvents[i]\n        if (evt.consumedBy === undefined) queue.add(evt)\n      }\n      if (queue.size != 0) {\n        evt = queue.first()\n        queue.delete(evt)\n      } else {\n        evt = null;\n      }\n    }\n\n    // free some memory we don't need anymore\n    precision.reset()\n\n    /* Collect and compile segments we're keeping into a multipolygon */\n    const ringsOut = geomOut.RingOut.factory(sweepLine.segments)\n    const result = new geomOut.MultiPolyOut(ringsOut)\n    return result.getGeom()\n  }\n}\n\n// singleton available by import\nconst operation = new Operation()\n\nexport default operation\n","import * as bn from \"bignumber.js\";\n\nexport interface Vector {\n  x: bn.BigNumber;\n  y: bn.BigNumber;\n}\n\n/* Cross Product of two vectors with first point at origin */\nexport const crossProduct = (a: Vector, b: Vector) => a.x.times(b.y).minus(a.y.times(b.x))\n\n/* Dot Product of two vectors with first point at origin */\nexport const dotProduct = (a: Vector, b: Vector) => a.x.times(b.x).plus(a.y.times(b.y))\n\nexport const length = (v: Vector) => dotProduct(v, v).sqrt()\n\n/* Get the sine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const sineOfAngle = (pShared: Vector, pBase: Vector, pAngle: Vector) => {\n  const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) }\n  const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) }\n  return crossProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase))\n}\n\n/* Get the cosine of the angle from pShared -> pAngle to pShaed -> pBase */\nexport const cosineOfAngle = (pShared: Vector, pBase: Vector, pAngle: Vector) => {\n  const vBase = { x: pBase.x.minus(pShared.x), y: pBase.y.minus(pShared.y) }\n  const vAngle = { x: pAngle.x.minus(pShared.x), y: pAngle.y.minus(pShared.y) }\n  return dotProduct(vAngle, vBase).div(length(vAngle)).div(length(vBase))\n}\n\n/* Get the x coordinate where the given line (defined by a point and vector)\n * crosses the horizontal line with the given y coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const horizontalIntersection = (pt: Vector, v: Vector, y: bn.BigNumber) => {\n  if (v.y.isZero()) return null\n  return { x: pt.x.plus((v.x.div(v.y)).times(y.minus(pt.y))), y: y }\n}\n\n/* Get the y coordinate where the given line (defined by a point and vector)\n * crosses the vertical line with the given x coordiante.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const verticalIntersection = (pt: Vector, v: Vector, x: bn.BigNumber) => {\n  if (v.x.isZero()) return null\n  return { x: x, y: pt.y.plus((v.y.div(v.x)).times(x.minus(pt.x))) }\n}\n\n/* Get the intersection of two lines, each defined by a base point and a vector.\n * In the case of parrallel lines (including overlapping ones) returns null. */\nexport const intersection = (pt1: Vector, v1: Vector, pt2: Vector, v2: Vector) => {\n  // take some shortcuts for vertical and horizontal lines\n  // this also ensures we don't calculate an intersection and then discover\n  // it's actually outside the bounding box of the line\n  if (v1.x.isZero()) return verticalIntersection(pt2, v2, pt1.x)\n  if (v2.x.isZero()) return verticalIntersection(pt1, v1, pt2.x)\n  if (v1.y.isZero()) return horizontalIntersection(pt2, v2, pt1.y)\n  if (v2.y.isZero()) return horizontalIntersection(pt1, v1, pt2.y)\n\n  // General case for non-overlapping segments.\n  // This algorithm is based on Schneider and Eberly.\n  // http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf - pg 244\n\n  const kross = crossProduct(v1, v2)\n  if (kross.isZero()) return null\n\n  const ve = { x: pt2.x.minus(pt1.x), y: pt2.y.minus(pt1.y) }\n  const d1 = crossProduct(ve, v1).div(kross)\n  const d2 = crossProduct(ve, v2).div(kross)\n\n  // take the average of the two calculations to minimize rounding error\n  const x1 = pt1.x.plus(d2.times(v1.x)),\n    x2 = pt2.x.plus(d1.times(v2.x))\n  const y1 = pt1.y.plus(d2.times(v1.y)),\n    y2 = pt2.y.plus(d1.times(v2.y))\n  const x = x1.plus(x2).div(2)\n  const y = y1.plus(y2).div(2)\n  return { x: x, y: y } as Vector\n}\n\n/* Given a vector, return one that is perpendicular */\nexport const perpendicular = (v: Vector) => {\n  return { x: v.y.negated(), y: v.x }\n}","import BigNumber from \"bignumber.js\";\nimport Segment from \"./segment.js\"\nimport { cosineOfAngle, sineOfAngle, Vector } from \"./vector.js\"\n\nexport interface Point extends Vector {\n  events: SweepEvent[];\n}\n\nexport default class SweepEvent {\n  point: Point;\n  isLeft: boolean;\n  segment!: Segment;\n  otherSE!: SweepEvent;\n  consumedBy: SweepEvent | undefined;\n\n  // for ordering sweep events in the sweep event queue\n  static compare(a: SweepEvent, b: SweepEvent) {\n    // favor event with a point that the sweep line hits first\n    const ptCmp = SweepEvent.comparePoints(a.point, b.point)\n    if (ptCmp !== 0) return ptCmp\n\n    // the points are the same, so link them if needed\n    if (a.point !== b.point) a.link(b)\n\n    // favor right events over left\n    if (a.isLeft !== b.isLeft) return a.isLeft ? 1 : -1\n\n    // we have two matching left or right endpoints\n    // ordering of this case is the same as for their segments\n    return Segment.compare(a.segment, b.segment)\n  }\n\n  // for ordering points in sweep line order\n  static comparePoints(aPt: Point, bPt: Point) {\n    if (aPt.x.isLessThan(bPt.x)) return -1\n    if (aPt.x.isGreaterThan(bPt.x)) return 1\n\n    if (aPt.y.isLessThan(bPt.y)) return -1\n    if (aPt.y.isGreaterThan(bPt.y)) return 1\n\n    return 0\n  }\n\n  // Warning: 'point' input will be modified and re-used (for performance)\n  constructor(point: Point, isLeft: boolean) {\n    if (point.events === undefined) point.events = [this]\n    else point.events.push(this)\n    this.point = point\n    this.isLeft = isLeft\n    // this.segment, this.otherSE set by factory\n  }\n\n  link(other: SweepEvent) {\n    if (other.point === this.point) {\n      throw new Error(\"Tried to link already linked events\")\n    }\n    const otherEvents = other.point.events\n    for (let i = 0, iMax = otherEvents.length; i < iMax; i++) {\n      const evt = otherEvents[i]\n      this.point.events.push(evt)\n      evt.point = this.point\n    }\n    this.checkForConsuming()\n  }\n\n  /* Do a pass over our linked events and check to see if any pair\n   * of segments match, and should be consumed. */\n  checkForConsuming() {\n    // FIXME: The loops in this method run O(n^2) => no good.\n    //        Maintain little ordered sweep event trees?\n    //        Can we maintaining an ordering that avoids the need\n    //        for the re-sorting with getLeftmostComparator in geom-out?\n\n    // Compare each pair of events to see if other events also match\n    const numEvents = this.point.events.length\n    for (let i = 0; i < numEvents; i++) {\n      const evt1 = this.point.events[i]\n      if (evt1.segment.consumedBy !== undefined) continue\n      for (let j = i + 1; j < numEvents; j++) {\n        const evt2 = this.point.events[j]\n        if (evt2.consumedBy !== undefined) continue\n        if (evt1.otherSE.point.events !== evt2.otherSE.point.events) continue\n        evt1.segment.consume(evt2.segment)\n      }\n    }\n  }\n\n  getAvailableLinkedEvents() {\n    // point.events is always of length 2 or greater\n    const events = []\n    for (let i = 0, iMax = this.point.events.length; i < iMax; i++) {\n      const evt = this.point.events[i]\n      if (evt !== this && !evt.segment.ringOut && evt.segment.isInResult()) {\n        events.push(evt)\n      }\n    }\n    return events\n  }\n\n  /**\n   * Returns a comparator function for sorting linked events that will\n   * favor the event that will give us the smallest left-side angle.\n   * All ring construction starts as low as possible heading to the right,\n   * so by always turning left as sharp as possible we'll get polygons\n   * without uncessary loops & holes.\n   *\n   * The comparator function has a compute cache such that it avoids\n   * re-computing already-computed values.\n   */\n  getLeftmostComparator(baseEvent: SweepEvent) {\n    const cache = new Map<SweepEvent, { sine: BigNumber, cosine: BigNumber }>()\n\n    const fillCache = (linkedEvent: SweepEvent) => {\n      const nextEvent = linkedEvent.otherSE\n      cache.set(linkedEvent, {\n        sine: sineOfAngle(this.point, baseEvent.point, nextEvent.point),\n        cosine: cosineOfAngle(this.point, baseEvent.point, nextEvent.point),\n      })\n    }\n\n    return (a: SweepEvent, b: SweepEvent) => {\n      if (!cache.has(a)) fillCache(a)\n      if (!cache.has(b)) fillCache(b)\n\n      const { sine: asine, cosine: acosine } = cache.get(a)!\n      const { sine: bsine, cosine: bcosine } = cache.get(b)!\n\n      // both on or above x-axis\n      if (asine.isGreaterThanOrEqualTo(0) && bsine.isGreaterThanOrEqualTo(0)) {\n        if (acosine.isLessThan(bcosine)) return 1\n        if (acosine.isGreaterThan(bcosine)) return -1\n        return 0\n      }\n\n      // both below x-axis\n      if (asine.isLessThan(0) && bsine.isLessThan(0)) {\n        if (acosine.isLessThan(bcosine)) return -1\n        if (acosine.isGreaterThan(bcosine)) return 1\n        return 0\n      }\n\n      // one above x-axis, one below\n      if (bsine.isLessThan(asine)) return -1\n      if (bsine.isGreaterThan(asine)) return 1\n      return 0\n    }\n  }\n}\n","import { MultiPoly, Poly, Ring } from \"./geom-in.js\"\nimport { precision } from \"./precision.js\"\nimport Segment from \"./segment.js\"\nimport SweepEvent from \"./sweep-event.js\"\n\nexport class RingOut {\n  events: SweepEvent[]\n  poly: PolyOut | null\n  _isExteriorRing: boolean | undefined\n  _enclosingRing: RingOut | null | undefined\n  \n  /* Given the segments from the sweep line pass, compute & return a series\n   * of closed rings from all the segments marked to be part of the result */\n  static factory(allSegments: Segment[]) {\n    const ringsOut = []\n\n    for (let i = 0, iMax = allSegments.length; i < iMax; i++) {\n      const segment = allSegments[i]\n      if (!segment.isInResult() || segment.ringOut) continue\n\n      let prevEvent = null\n      let event = segment.leftSE\n      let nextEvent = segment.rightSE\n      const events = [event]\n\n      const startingPoint = event.point\n      const intersectionLEs = []\n\n      /* Walk the chain of linked events to form a closed ring */\n      while (true) {\n        prevEvent = event\n        event = nextEvent\n        events.push(event)\n\n        /* Is the ring complete? */\n        if (event.point === startingPoint) break\n\n        while (true) {\n          const availableLEs = event.getAvailableLinkedEvents()\n\n          /* Did we hit a dead end? This shouldn't happen. Indicates some earlier\n           * part of the algorithm malfunctioned... please file a bug report. */\n          if (availableLEs.length === 0) {\n            const firstPt = events[0].point\n            const lastPt = events[events.length - 1].point\n            throw new Error(\n              `Unable to complete output ring starting at [${firstPt.x},` +\n                ` ${firstPt.y}]. Last matching segment found ends at` +\n                ` [${lastPt.x}, ${lastPt.y}].`,\n            )\n          }\n\n          /* Only one way to go, so cotinue on the path */\n          if (availableLEs.length === 1) {\n            nextEvent = availableLEs[0].otherSE\n            break\n          }\n\n          /* We must have an intersection. Check for a completed loop */\n          let indexLE = null\n          for (let j = 0, jMax = intersectionLEs.length; j < jMax; j++) {\n            if (intersectionLEs[j].point === event.point) {\n              indexLE = j\n              break\n            }\n          }\n          /* Found a completed loop. Cut that off and make a ring */\n          if (indexLE !== null) {\n            const intersectionLE = intersectionLEs.splice(indexLE)[0]\n            const ringEvents = events.splice(intersectionLE.index)\n            ringEvents.unshift(ringEvents[0].otherSE)\n            ringsOut.push(new RingOut(ringEvents.reverse()))\n            continue\n          }\n          /* register the intersection */\n          intersectionLEs.push({\n            index: events.length,\n            point: event.point,\n          })\n          /* Choose the left-most option to continue the walk */\n          const comparator = event.getLeftmostComparator(prevEvent)\n          nextEvent = availableLEs.sort(comparator)[0].otherSE\n          break\n        }\n      }\n\n      ringsOut.push(new RingOut(events))\n    }\n    return ringsOut\n  }\n\n  constructor(events: SweepEvent[]) {\n    this.events = events\n    for (let i = 0, iMax = events.length; i < iMax; i++) {\n      events[i].segment.ringOut = this\n    }\n    this.poly = null\n  }\n\n  getGeom() {\n    // Remove superfluous points (ie extra points along a straight line),\n    let prevPt = this.events[0].point\n    const points = [prevPt]\n    for (let i = 1, iMax = this.events.length - 1; i < iMax; i++) {\n      const pt = this.events[i].point\n      const nextPt = this.events[i + 1].point\n      if (precision.orient(pt, prevPt, nextPt) === 0) continue\n      points.push(pt)\n      prevPt = pt\n    }\n\n    // ring was all (within rounding error of angle calc) colinear points\n    if (points.length === 1) return null\n\n    // check if the starting point is necessary\n    const pt = points[0]\n    const nextPt = points[1]\n    if (precision.orient(pt, prevPt, nextPt) === 0) points.shift()\n\n    points.push(points[0])\n    const step = this.isExteriorRing() ? 1 : -1\n    const iStart = this.isExteriorRing() ? 0 : points.length - 1\n    const iEnd = this.isExteriorRing() ? points.length : -1\n    const orderedPoints: Ring = []\n    for (let i = iStart; i != iEnd; i += step)\n      orderedPoints.push([points[i].x.toNumber(), points[i].y.toNumber()])\n    return orderedPoints\n  }\n\n  isExteriorRing(): boolean {\n    if (this._isExteriorRing === undefined) {\n      const enclosing = this.enclosingRing()\n      this._isExteriorRing = enclosing ? !enclosing.isExteriorRing() : true\n    }\n    return this._isExteriorRing\n  }\n\n  enclosingRing() {\n    if (this._enclosingRing === undefined) {\n      this._enclosingRing = this._calcEnclosingRing()\n    }\n    return this._enclosingRing\n  }\n\n  /* Returns the ring that encloses this one, if any */\n  _calcEnclosingRing(): RingOut | null | undefined {\n    // start with the ealier sweep line event so that the prevSeg\n    // chain doesn't lead us inside of a loop of ours\n    let leftMostEvt = this.events[0]\n    for (let i = 1, iMax = this.events.length; i < iMax; i++) {\n      const evt = this.events[i]\n      if (SweepEvent.compare(leftMostEvt, evt) > 0) leftMostEvt = evt\n    }\n\n    let prevSeg: Segment | null | undefined = leftMostEvt.segment.prevInResult()\n    let prevPrevSeg: Segment | null | undefined = prevSeg ? prevSeg.prevInResult() : null\n\n    while (true) {\n      // no segment found, thus no ring can enclose us\n      if (!prevSeg) return null\n\n      // no segments below prev segment found, thus the ring of the prev\n      // segment must loop back around and enclose us\n      if (!prevPrevSeg) return prevSeg.ringOut\n\n      // if the two segments are of different rings, the ring of the prev\n      // segment must either loop around us or the ring of the prev prev\n      // seg, which would make us and the ring of the prev peers\n      if (prevPrevSeg.ringOut !== prevSeg.ringOut) {\n        if (prevPrevSeg.ringOut?.enclosingRing() !== prevSeg.ringOut) {\n          return prevSeg.ringOut\n        } else return prevSeg.ringOut?.enclosingRing()\n      }\n\n      // two segments are from the same ring, so this was a penisula\n      // of that ring. iterate downward, keep searching\n      prevSeg = prevPrevSeg.prevInResult()\n      prevPrevSeg = prevSeg ? prevSeg.prevInResult() : null\n    }\n  }\n}\n\nexport class PolyOut {\n  exteriorRing: RingOut;\n  interiorRings: RingOut[];\n\n  constructor(exteriorRing: RingOut) {\n    this.exteriorRing = exteriorRing\n    exteriorRing.poly = this\n    this.interiorRings = []\n  }\n\n  addInterior(ring: RingOut) {\n    this.interiorRings.push(ring)\n    ring.poly = this\n  }\n\n  getGeom() {\n    const geom0 = this.exteriorRing.getGeom()\n    // exterior ring was all (within rounding error of angle calc) colinear points\n    if (geom0 === null) return null\n    const geom: Poly = [geom0];\n    for (let i = 0, iMax = this.interiorRings.length; i < iMax; i++) {\n      const ringGeom = this.interiorRings[i].getGeom()\n      // interior ring was all (within rounding error of angle calc) colinear points\n      if (ringGeom === null) continue\n      geom.push(ringGeom)\n    }\n    return geom\n  }\n}\n\nexport class MultiPolyOut {\n  rings: RingOut[];\n  polys: PolyOut[];\n\n  constructor(rings: RingOut[]) {\n    this.rings = rings\n    this.polys = this._composePolys(rings)\n  }\n\n  getGeom() {\n    const geom: MultiPoly = []\n    for (let i = 0, iMax = this.polys.length; i < iMax; i++) {\n      const polyGeom = this.polys[i].getGeom()\n      // exterior ring was all (within rounding error of angle calc) colinear points\n      if (polyGeom === null) continue\n      geom.push(polyGeom)\n    }\n    return geom\n  }\n\n  _composePolys(rings: RingOut[]) {\n    const polys = []\n    for (let i = 0, iMax = rings.length; i < iMax; i++) {\n      const ring = rings[i]\n      if (ring.poly) continue\n      if (ring.isExteriorRing()) polys.push(new PolyOut(ring))\n      else {\n        const enclosingRing = ring.enclosingRing()\n        if (!enclosingRing?.poly) polys.push(new PolyOut(enclosingRing!))\n        enclosingRing?.poly?.addInterior(ring)\n      }\n    }\n    return polys\n  }\n}\n","import { SplayTreeSet } from \"splaytree-ts\"\nimport Segment from \"./segment.js\"\nimport SweepEvent, { Point } from \"./sweep-event.js\"\n\n/**\n * NOTE:  We must be careful not to change any segments while\n *        they are in the SplayTree. AFAIK, there's no way to tell\n *        the tree to rebalance itself - thus before splitting\n *        a segment that's in the tree, we remove it from the tree,\n *        do the split, then re-insert it. (Even though splitting a\n *        segment *shouldn't* change its correct position in the\n *        sweep line tree, the reality is because of rounding errors,\n *        it sometimes does.)\n */\n\nexport default class SweepLine {\n  private queue: SplayTreeSet<SweepEvent>\n  private tree: SplayTreeSet<Segment>\n  segments: Segment[]\n\n  constructor(queue: SplayTreeSet<SweepEvent>, comparator = Segment.compare) {\n    this.queue = queue\n    this.tree = new SplayTreeSet(comparator)\n    this.segments = []\n  }\n\n  process(event: SweepEvent) {\n    const segment = event.segment\n    const newEvents: SweepEvent[] = []\n\n    // if we've already been consumed by another segment,\n    // clean up our body parts and get out\n    if (event.consumedBy) {\n      if (event.isLeft) this.queue.delete(event.otherSE)\n      else this.tree.delete(segment)\n      return newEvents\n    }\n\n    if (event.isLeft) this.tree.add(segment);\n\n    let prevSeg: Segment | null = segment\n    let nextSeg: Segment | null = segment\n\n    // skip consumed segments still in tree\n    do {\n      prevSeg = this.tree.lastBefore(prevSeg)\n    } while (prevSeg != null && prevSeg.consumedBy != undefined)\n\n    // skip consumed segments still in tree\n    do {\n      nextSeg = this.tree.firstAfter(nextSeg)\n    } while (nextSeg != null && nextSeg.consumedBy != undefined)\n\n    if (event.isLeft) {\n      // Check for intersections against the previous segment in the sweep line\n      let prevMySplitter = null\n      if (prevSeg) {\n        const prevInter = prevSeg.getIntersection(segment)\n        if (prevInter !== null) {\n          if (!segment.isAnEndpoint(prevInter)) prevMySplitter = prevInter\n          if (!prevSeg.isAnEndpoint(prevInter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, prevInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // Check for intersections against the next segment in the sweep line\n      let nextMySplitter = null\n      if (nextSeg) {\n        const nextInter = nextSeg.getIntersection(segment)\n        if (nextInter !== null) {\n          if (!segment.isAnEndpoint(nextInter)) nextMySplitter = nextInter\n          if (!nextSeg.isAnEndpoint(nextInter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, nextInter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      // For simplicity, even if we find more than one intersection we only\n      // spilt on the 'earliest' (sweep-line style) of the intersections.\n      // The other intersection will be handled in a future process().\n      if (prevMySplitter !== null || nextMySplitter !== null) {\n        let mySplitter = null\n        if (prevMySplitter === null) mySplitter = nextMySplitter\n        else if (nextMySplitter === null) mySplitter = prevMySplitter\n        else {\n          const cmpSplitters = SweepEvent.comparePoints(\n            prevMySplitter,\n            nextMySplitter,\n          )\n          mySplitter = cmpSplitters <= 0 ? prevMySplitter : nextMySplitter\n        }\n\n        // Rounding errors can cause changes in ordering,\n        // so remove afected segments and right sweep events before splitting\n        this.queue.delete(segment.rightSE)\n        newEvents.push(segment.rightSE)\n\n        const newEventsFromSplit = segment.split(mySplitter!)\n        for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n          newEvents.push(newEventsFromSplit[i])\n        }\n      }\n\n      if (newEvents.length > 0) {\n        // We found some intersections, so re-do the current event to\n        // make sure sweep line ordering is totally consistent for later\n        // use with the segment 'prev' pointers\n        this.tree.delete(segment)\n        newEvents.push(event)\n      } else {\n        // done with left event\n        this.segments.push(segment)\n        segment.prev = prevSeg\n      }\n    } else {\n      // event.isRight\n\n      // since we're about to be removed from the sweep line, check for\n      // intersections between our previous and next segments\n      if (prevSeg && nextSeg) {\n        const inter = prevSeg.getIntersection(nextSeg)\n        if (inter !== null) {\n          if (!prevSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(prevSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n          if (!nextSeg.isAnEndpoint(inter)) {\n            const newEventsFromSplit = this._splitSafely(nextSeg, inter)\n            for (let i = 0, iMax = newEventsFromSplit.length; i < iMax; i++) {\n              newEvents.push(newEventsFromSplit[i])\n            }\n          }\n        }\n      }\n\n      this.tree.delete(segment)\n    }\n\n    return newEvents\n  }\n\n  /* Safely split a segment that is currently in the datastructures\n   * IE - a segment other than the one that is currently being processed. */\n  _splitSafely(seg: Segment, pt: Point) {\n    // Rounding errors can cause changes in ordering,\n    // so remove afected segments and right sweep events before splitting\n    // removeNode() doesn't work, so have re-find the seg\n    // https://github.com/w8r/splay-tree/pull/5\n    this.tree.delete(seg)\n    const rightSE = seg.rightSE\n    this.queue.delete(rightSE)\n    const newEvents = seg.split(pt)\n    newEvents.push(rightSE)\n    // splitting can trigger consumption\n    if (seg.consumedBy === undefined) this.tree.add(seg)\n    return newEvents\n  }\n}\n","import { getBboxOverlap, isInBbox } from \"./bbox.js\"\nimport { MultiPolyIn, RingIn } from \"./geom-in.js\"\nimport { RingOut } from \"./geom-out.js\"\nimport operation from \"./operation.js\"\nimport { precision } from \"./precision.js\"\nimport SweepEvent, { Point } from \"./sweep-event.js\"\nimport { intersection } from \"./vector.js\"\n\ninterface State {\n  rings: RingIn[],\n  windings: number[],\n  multiPolys: MultiPolyIn[]\n}\n\n// Give segments unique ID's to get consistent sorting of\n// segments and sweep events when all else is identical\nlet segmentId = 0\n\nexport default class Segment {\n  id: number\n  leftSE: SweepEvent\n  rightSE: SweepEvent\n  rings: RingIn[] | null\n  windings: number[] | null\n  ringOut: RingOut | undefined\n  consumedBy: Segment | undefined\n  prev: Segment | null | undefined\n  _prevInResult: Segment | null | undefined\n  _beforeState: State | undefined\n  _afterState: State | undefined\n  _isInResult: boolean | undefined\n\n  /* This compare() function is for ordering segments in the sweep\n   * line tree, and does so according to the following criteria:\n   *\n   * Consider the vertical line that lies an infinestimal step to the\n   * right of the right-more of the two left endpoints of the input\n   * segments. Imagine slowly moving a point up from negative infinity\n   * in the increasing y direction. Which of the two segments will that\n   * point intersect first? That segment comes 'before' the other one.\n   *\n   * If neither segment would be intersected by such a line, (if one\n   * or more of the segments are vertical) then the line to be considered\n   * is directly on the right-more of the two left inputs.\n   */\n  static compare(a: Segment, b: Segment) {\n    const alx = a.leftSE.point.x\n    const blx = b.leftSE.point.x\n    const arx = a.rightSE.point.x\n    const brx = b.rightSE.point.x\n\n    // check if they're even in the same vertical plane\n    if (brx.isLessThan(alx)) return 1\n    if (arx.isLessThan(blx)) return -1\n\n    const aly = a.leftSE.point.y\n    const bly = b.leftSE.point.y\n    const ary = a.rightSE.point.y\n    const bry = b.rightSE.point.y\n\n    // is left endpoint of segment B the right-more?\n    if (alx.isLessThan(blx)) {\n      // are the two segments in the same horizontal plane?\n      if (bly.isLessThan(aly) && bly.isLessThan(ary)) return 1\n      if (bly.isGreaterThan(aly) && bly.isGreaterThan(ary)) return -1\n\n      // is the B left endpoint colinear to segment A?\n      const aCmpBLeft = a.comparePoint(b.leftSE.point)\n      if (aCmpBLeft < 0) return 1\n      if (aCmpBLeft > 0) return -1\n\n      // is the A right endpoint colinear to segment B ?\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return -1\n    }\n\n    // is left endpoint of segment A the right-more?\n    if (alx.isGreaterThan(blx)) {\n      if (aly.isLessThan(bly) && aly.isLessThan(bry)) return -1\n      if (aly.isGreaterThan(bly) && aly.isGreaterThan(bry)) return 1\n\n      // is the A left endpoint colinear to segment B?\n      const bCmpALeft = b.comparePoint(a.leftSE.point)\n      if (bCmpALeft !== 0) return bCmpALeft\n\n      // is the B right endpoint colinear to segment A?\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n\n      // colinear segments, consider the one with left-more\n      // left endpoint to be first (arbitrary?)\n      return 1\n    }\n\n    // if we get here, the two left endpoints are in the same\n    // vertical plane, ie alx === blx\n\n    // consider the lower left-endpoint to come first\n    if (aly.isLessThan(bly)) return -1\n    if (aly.isGreaterThan(bly)) return 1\n\n    // left endpoints are identical\n    // check for colinearity by using the left-more right endpoint\n\n    // is the A right endpoint more left-more?\n    if (arx.isLessThan(brx)) {\n      const bCmpARight = b.comparePoint(a.rightSE.point)\n      if (bCmpARight !== 0) return bCmpARight\n    }\n\n    // is the B right endpoint more left-more?\n    if (arx.isGreaterThan(brx)) {\n      const aCmpBRight = a.comparePoint(b.rightSE.point)\n      if (aCmpBRight < 0) return 1\n      if (aCmpBRight > 0) return -1\n    }\n\n    if (!arx.eq(brx)) {\n      // are these two [almost] vertical segments with opposite orientation?\n      // if so, the one with the lower right endpoint comes first\n      const ay = ary.minus(aly)\n      const ax = arx.minus(alx)\n      const by = bry.minus(bly)\n      const bx = brx.minus(blx)\n      if (ay.isGreaterThan(ax) && by.isLessThan(bx)) return 1\n      if (ay.isLessThan(ax) && by.isGreaterThan(bx)) return -1\n    }\n\n    // we have colinear segments with matching orientation\n    // consider the one with more left-more right endpoint to be first\n    if (arx.isGreaterThan(brx)) return 1\n    if (arx.isLessThan(brx)) return -1\n\n    // if we get here, two two right endpoints are in the same\n    // vertical plane, ie arx === brx\n\n    // consider the lower right-endpoint to come first\n    if (ary.isLessThan(bry)) return -1\n    if (ary.isGreaterThan(bry)) return 1\n\n    // right endpoints identical as well, so the segments are idential\n    // fall back on creation order as consistent tie-breaker\n    if (a.id < b.id) return -1\n    if (a.id > b.id) return 1\n\n    // identical segment, ie a === b\n    return 0\n  }\n\n  /* Warning: a reference to ringWindings input will be stored,\n   *  and possibly will be later modified */\n  constructor(leftSE: SweepEvent, rightSE: SweepEvent, rings: RingIn[], windings: number[]) {\n    this.id = ++segmentId\n    this.leftSE = leftSE\n    leftSE.segment = this\n    leftSE.otherSE = rightSE\n    this.rightSE = rightSE\n    rightSE.segment = this\n    rightSE.otherSE = leftSE\n    this.rings = rings\n    this.windings = windings\n    // left unset for performance, set later in algorithm\n    // this.ringOut, this.consumedBy, this.prev\n  }\n\n  static fromRing(pt1: Point, pt2: Point, ring: RingIn) {\n    let leftPt: Point, rightPt: Point, winding: number\n\n    // ordering the two points according to sweep line ordering\n    const cmpPts = SweepEvent.comparePoints(pt1, pt2)\n    if (cmpPts < 0) {\n      leftPt = pt1\n      rightPt = pt2\n      winding = 1\n    } else if (cmpPts > 0) {\n      leftPt = pt2\n      rightPt = pt1\n      winding = -1\n    } else\n      throw new Error(\n        `Tried to create degenerate segment at [${pt1.x}, ${pt1.y}]`,\n      )\n\n    const leftSE = new SweepEvent(leftPt, true)\n    const rightSE = new SweepEvent(rightPt, false)\n    return new Segment(leftSE, rightSE, [ring], [winding])\n  }\n\n  /* When a segment is split, the rightSE is replaced with a new sweep event */\n  replaceRightSE(newRightSE: SweepEvent) {\n    this.rightSE = newRightSE\n    this.rightSE.segment = this\n    this.rightSE.otherSE = this.leftSE\n    this.leftSE.otherSE = this.rightSE\n  }\n\n  bbox() {\n    const y1 = this.leftSE.point.y\n    const y2 = this.rightSE.point.y\n    return {\n      ll: { x: this.leftSE.point.x, y: y1.isLessThan(y2) ? y1 : y2 },\n      ur: { x: this.rightSE.point.x, y: y1.isGreaterThan(y2) ? y1 : y2 },\n    }\n  }\n\n  /* A vector from the left point to the right */\n  vector() {\n    return {\n      x: this.rightSE.point.x.minus(this.leftSE.point.x),\n      y: this.rightSE.point.y.minus(this.leftSE.point.y),\n    }\n  }\n\n  isAnEndpoint(pt: Point) {\n    return (\n      (pt.x.eq(this.leftSE.point.x) && pt.y.eq(this.leftSE.point.y)) ||\n      (pt.x.eq(this.rightSE.point.x) && pt.y.eq(this.rightSE.point.y))\n    )\n  }\n\n  /* Compare this segment with a point.\n   *\n   * A point P is considered to be colinear to a segment if there\n   * exists a distance D such that if we travel along the segment\n   * from one * endpoint towards the other a distance D, we find\n   * ourselves at point P.\n   *\n   * Return value indicates:\n   *\n   *   1: point lies above the segment (to the left of vertical)\n   *   0: point is colinear to segment\n   *  -1: point lies below the segment (to the right of vertical)\n   */\n  comparePoint(point: Point) {\n    return precision.orient(this.leftSE.point, point, this.rightSE.point)\n  }\n\n  /**\n   * Given another segment, returns the first non-trivial intersection\n   * between the two segments (in terms of sweep line ordering), if it exists.\n   *\n   * A 'non-trivial' intersection is one that will cause one or both of the\n   * segments to be split(). As such, 'trivial' vs. 'non-trivial' intersection:\n   *\n   *   * endpoint of segA with endpoint of segB --> trivial\n   *   * endpoint of segA with point along segB --> non-trivial\n   *   * endpoint of segB with point along segA --> non-trivial\n   *   * point along segA with point along segB --> non-trivial\n   *\n   * If no non-trivial intersection exists, return null\n   * Else, return null.\n   */\n  getIntersection(other: Segment) {\n    // If bboxes don't overlap, there can't be any intersections\n    const tBbox = this.bbox()\n    const oBbox = other.bbox()\n    const bboxOverlap = getBboxOverlap(tBbox, oBbox)\n    if (bboxOverlap === null) return null\n\n    // We first check to see if the endpoints can be considered intersections.\n    // This will 'snap' intersections to endpoints if possible, and will\n    // handle cases of colinearity.\n\n    const tlp = this.leftSE.point\n    const trp = this.rightSE.point\n    const olp = other.leftSE.point\n    const orp = other.rightSE.point\n\n    // does each endpoint touch the other segment?\n    // note that we restrict the 'touching' definition to only allow segments\n    // to touch endpoints that lie forward from where we are in the sweep line pass\n    const touchesOtherLSE = isInBbox(tBbox, olp) && this.comparePoint(olp) === 0\n    const touchesThisLSE = isInBbox(oBbox, tlp) && other.comparePoint(tlp) === 0\n    const touchesOtherRSE = isInBbox(tBbox, orp) && this.comparePoint(orp) === 0\n    const touchesThisRSE = isInBbox(oBbox, trp) && other.comparePoint(trp) === 0\n\n    // do left endpoints match?\n    if (touchesThisLSE && touchesOtherLSE) {\n      // these two cases are for colinear segments with matching left\n      // endpoints, and one segment being longer than the other\n      if (touchesThisRSE && !touchesOtherRSE) return trp\n      if (!touchesThisRSE && touchesOtherRSE) return orp\n      // either the two segments match exactly (two trival intersections)\n      // or just on their left endpoint (one trivial intersection\n      return null\n    }\n\n    // does this left endpoint matches (other doesn't)\n    if (touchesThisLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesOtherRSE) {\n        if (tlp.x.eq(orp.x) && tlp.y.eq(orp.y)) return null\n      }\n      // t-intersection on left endpoint\n      return tlp\n    }\n\n    // does other left endpoint matches (this doesn't)\n    if (touchesOtherLSE) {\n      // check for segments that just intersect on opposing endpoints\n      if (touchesThisRSE) {\n        if (trp.x.eq(olp.x) && trp.y.eq(olp.y)) return null\n      }\n      // t-intersection on left endpoint\n      return olp\n    }\n\n    // trivial intersection on right endpoints\n    if (touchesThisRSE && touchesOtherRSE) return null\n\n    // t-intersections on just one right endpoint\n    if (touchesThisRSE) return trp\n    if (touchesOtherRSE) return orp\n\n    // None of our endpoints intersect. Look for a general intersection between\n    // infinite lines laid over the segments\n    const pt = intersection(tlp, this.vector(), olp, other.vector())\n\n    // are the segments parrallel? Note that if they were colinear with overlap,\n    // they would have an endpoint intersection and that case was already handled above\n    if (pt === null) return null\n\n    // is the intersection found between the lines not on the segments?\n    if (!isInBbox(bboxOverlap, pt)) return null\n\n    // round the the computed point if needed\n    return precision.snap(pt) as Point\n  }\n\n  /**\n   * Split the given segment into multiple segments on the given points.\n   *  * Each existing segment will retain its leftSE and a new rightSE will be\n   *    generated for it.\n   *  * A new segment will be generated which will adopt the original segment's\n   *    rightSE, and a new leftSE will be generated for it.\n   *  * If there are more than two points given to split on, new segments\n   *    in the middle will be generated with new leftSE and rightSE's.\n   *  * An array of the newly generated SweepEvents will be returned.\n   *\n   * Warning: input array of points is modified\n   */\n  split(point: Point) {\n    const newEvents = []\n    const alreadyLinked = point.events !== undefined\n\n    const newLeftSE = new SweepEvent(point, true)\n    const newRightSE = new SweepEvent(point, false)\n    const oldRightSE = this.rightSE\n    this.replaceRightSE(newRightSE)\n    newEvents.push(newRightSE)\n    newEvents.push(newLeftSE)\n    const newSeg = new Segment(\n      newLeftSE,\n      oldRightSE,\n      this.rings!.slice(),\n      this.windings!.slice(),\n    )\n\n    // when splitting a nearly vertical downward-facing segment,\n    // sometimes one of the resulting new segments is vertical, in which\n    // case its left and right events may need to be swapped\n    if (\n      SweepEvent.comparePoints(newSeg.leftSE.point, newSeg.rightSE.point) > 0\n    ) {\n      newSeg.swapEvents()\n    }\n    if (SweepEvent.comparePoints(this.leftSE.point, this.rightSE.point) > 0) {\n      this.swapEvents()\n    }\n\n    // in the point we just used to create new sweep events with was already\n    // linked to other events, we need to check if either of the affected\n    // segments should be consumed\n    if (alreadyLinked) {\n      newLeftSE.checkForConsuming()\n      newRightSE.checkForConsuming()\n    }\n\n    return newEvents\n  }\n\n  /* Swap which event is left and right */\n  swapEvents() {\n    const tmpEvt = this.rightSE\n    this.rightSE = this.leftSE\n    this.leftSE = tmpEvt\n    this.leftSE.isLeft = true\n    this.rightSE.isLeft = false\n    for (let i = 0, iMax = this.windings!.length; i < iMax; i++) {\n      this.windings![i] *= -1\n    }\n  }\n\n  /* Consume another segment. We take their rings under our wing\n   * and mark them as consumed. Use for perfectly overlapping segments */\n  consume(other: Segment) {\n    let consumer = this as Segment\n    let consumee = other\n    while (consumer.consumedBy) consumer = consumer.consumedBy\n    while (consumee.consumedBy) consumee = consumee.consumedBy\n\n    const cmp = Segment.compare(consumer, consumee)\n    if (cmp === 0) return // already consumed\n    // the winner of the consumption is the earlier segment\n    // according to sweep line ordering\n    if (cmp > 0) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    // make sure a segment doesn't consume it's prev\n    if (consumer.prev === consumee) {\n      const tmp = consumer\n      consumer = consumee\n      consumee = tmp\n    }\n\n    for (let i = 0, iMax = consumee.rings!.length; i < iMax; i++) {\n      const ring = consumee.rings![i]\n      const winding = consumee.windings![i]\n      const index = consumer.rings!.indexOf(ring)\n      if (index === -1) {\n        consumer.rings!.push(ring)\n        consumer.windings!.push(winding)\n      } else consumer.windings![index] += winding\n    }\n    consumee.rings = null\n    consumee.windings = null\n    consumee.consumedBy = consumer\n\n    // mark sweep events consumed as to maintain ordering in sweep event queue\n    consumee.leftSE.consumedBy = consumer.leftSE\n    consumee.rightSE.consumedBy = consumer.rightSE\n  }\n\n  /* The first segment previous segment chain that is in the result */\n  prevInResult(): Segment | null | undefined {\n    if (this._prevInResult !== undefined) return this._prevInResult\n    if (!this.prev) this._prevInResult = null\n    else if (this.prev.isInResult()) this._prevInResult = this.prev\n    else this._prevInResult = this.prev.prevInResult()\n    return this._prevInResult\n  }\n\n  beforeState(): State {\n    if (this._beforeState !== undefined) return this._beforeState\n    if (!this.prev)\n      this._beforeState = {\n        rings: [],\n        windings: [],\n        multiPolys: [],\n      }\n    else {\n      const seg = this.prev.consumedBy || this.prev\n      this._beforeState = seg.afterState()\n    }\n    return this._beforeState\n  }\n\n  afterState() {\n    if (this._afterState !== undefined) return this._afterState\n\n    const beforeState = this.beforeState()\n    this._afterState = {\n      rings: beforeState.rings.slice(0),\n      windings: beforeState.windings.slice(0),\n      multiPolys: [],\n    }\n    const ringsAfter = this._afterState.rings\n    const windingsAfter = this._afterState.windings\n    const mpsAfter = this._afterState.multiPolys\n\n    // calculate ringsAfter, windingsAfter\n    for (let i = 0, iMax = this.rings!.length; i < iMax; i++) {\n      const ring = this.rings![i]\n      const winding = this.windings![i]\n      const index = ringsAfter.indexOf(ring)\n      if (index === -1) {\n        ringsAfter.push(ring)\n        windingsAfter.push(winding)\n      } else windingsAfter[index] += winding\n    }\n\n    // calcualte polysAfter\n    const polysAfter = []\n    const polysExclude = []\n    for (let i = 0, iMax = ringsAfter.length; i < iMax; i++) {\n      if (windingsAfter[i] === 0) continue // non-zero rule\n      const ring = ringsAfter[i]\n      const poly = ring.poly\n      if (polysExclude.indexOf(poly) !== -1) continue\n      if (ring.isExterior) polysAfter.push(poly)\n      else {\n        if (polysExclude.indexOf(poly) === -1) polysExclude.push(poly)\n        const index = polysAfter.indexOf(ring.poly)\n        if (index !== -1) polysAfter.splice(index, 1)\n      }\n    }\n\n    // calculate multiPolysAfter\n    for (let i = 0, iMax = polysAfter.length; i < iMax; i++) {\n      const mp = polysAfter[i].multiPoly\n      if (mpsAfter.indexOf(mp) === -1) mpsAfter.push(mp)\n    }\n\n    return this._afterState\n  }\n\n  /* Is this segment part of the final result? */\n  isInResult() {\n    // if we've been consumed, we're not in the result\n    if (this.consumedBy) return false\n\n    if (this._isInResult !== undefined) return this._isInResult\n\n    const mpsBefore = this.beforeState().multiPolys\n    const mpsAfter = this.afterState().multiPolys\n\n    switch (operation.type) {\n      case \"union\": {\n        // UNION - included iff:\n        //  * On one side of us there is 0 poly interiors AND\n        //  * On the other side there is 1 or more.\n        const noBefores = mpsBefore.length === 0\n        const noAfters = mpsAfter.length === 0\n        this._isInResult = noBefores !== noAfters\n        break\n      }\n\n      case \"intersection\": {\n        // INTERSECTION - included iff:\n        //  * on one side of us all multipolys are rep. with poly interiors AND\n        //  * on the other side of us, not all multipolys are repsented\n        //    with poly interiors\n        let least\n        let most\n        if (mpsBefore.length < mpsAfter.length) {\n          least = mpsBefore.length\n          most = mpsAfter.length\n        } else {\n          least = mpsAfter.length\n          most = mpsBefore.length\n        }\n        this._isInResult = most === operation.numMultiPolys && least < most\n        break\n      }\n\n      case \"xor\": {\n        // XOR - included iff:\n        //  * the difference between the number of multipolys represented\n        //    with poly interiors on our two sides is an odd number\n        const diff = Math.abs(mpsBefore.length - mpsAfter.length)\n        this._isInResult = diff % 2 === 1\n        break\n      }\n\n      case \"difference\": {\n        // DIFFERENCE included iff:\n        //  * on exactly one side, we have just the subject\n        const isJustSubject = (mps: MultiPolyIn[]) => mps.length === 1 && mps[0].isSubject\n        this._isInResult = isJustSubject(mpsBefore) !== isJustSubject(mpsAfter)\n        break\n      }\n    }\n\n    return this._isInResult\n  }\n}\n","import { Geom } from \"./geom-in.js\"\nimport { precision } from \"./precision.js\"\nimport operation from \"./operation.js\"\n\nexport { Geom }\n\nexport const union = (geom: Geom, ...moreGeoms: Geom[]) =>\n  operation.run(\"union\", geom, moreGeoms)\n\nexport const intersection = (geom: Geom, ...moreGeoms: Geom[]) =>\n  operation.run(\"intersection\", geom, moreGeoms)\n\nexport const xor = (geom: Geom, ...moreGeoms: Geom[]) =>\n  operation.run(\"xor\", geom, moreGeoms)\n\nexport const difference = (geom: Geom, ...moreGeoms: Geom[]) =>\n  operation.run(\"difference\", geom, moreGeoms)\n\nexport const setPrecision = precision.set"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}