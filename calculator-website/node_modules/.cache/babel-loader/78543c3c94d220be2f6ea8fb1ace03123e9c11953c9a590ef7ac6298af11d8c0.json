{"ast":null,"code":"import * as turf from '@turf/turf';\n\n// Filter collision data within the selected polygon\nexport const filterDataByArea = (data, polygon) => {\n  return data.filter(row => {\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\n    return turf.booleanPointInPolygon(point, polygon);\n  });\n};\n\n// Adjust counts for injuries and property damage PER ROW\nexport const adjustCounts = data => {\n  return data.map(row => {\n    let adjustedInjuries = 0;\n    let adjustedPropertyDamage = 0;\n    let adjustedFatalities = 0;\n    if (row.TYPE === 'INJURY') {\n      adjustedInjuries = Math.floor(row.count * 1.78);\n    } else if (row.TYPE === 'FATALITY') {\n      adjustedFatalities = Math.floor(row.count * 1.017);\n    } else if (row.TYPE === 'PROPERTY') {\n      adjustedPropertyDamage = row.count; // Property damage remains unchanged initially\n    }\n    return {\n      ...row,\n      adjustedInjuries,\n      adjustedPropertyDamage,\n      adjustedFatalities\n    };\n  });\n};\n\n// Calculate costs PER ROW\nexport const calculateCosts = data => {\n  const costMatrix = {\n    INJURY: {\n      direct: 48341,\n      human: 89408,\n      wtp: 158654\n    },\n    FATALITY: {\n      direct: 225558,\n      human: 2224580,\n      wtp: 6707228\n    },\n    PROPERTY: {\n      direct: 14065,\n      human: 0,\n      wtp: 0\n    }\n  };\n  return data.map(row => {\n    let totalDirect = 0;\n    let totalHuman = 0;\n    let totalWtp = 0;\n    if (row.TYPE === 'INJURY') {\n      totalDirect = row.adjustedInjuries * costMatrix.INJURY.direct;\n      totalHuman = row.adjustedInjuries * costMatrix.INJURY.human;\n      totalWtp = row.adjustedInjuries * costMatrix.INJURY.wtp;\n    } else if (row.TYPE === 'FATALITY') {\n      totalDirect = row.adjustedFatalities * costMatrix.FATALITY.direct;\n      totalHuman = row.adjustedFatalities * costMatrix.FATALITY.human;\n      totalWtp = row.adjustedFatalities * costMatrix.FATALITY.wtp;\n    } else if (row.TYPE === 'PROPERTY') {\n      totalDirect = row.adjustedPropertyDamage * costMatrix.PROPERTY.direct;\n    }\n\n    // Apply inflation adjustment only to the valid costs\n    const inflationAdjustedDirect = totalDirect * 1.2084;\n    const inflationAdjustedHuman = totalHuman * 1.2084;\n    const inflationAdjustedWtp = totalWtp * 1.2084;\n    return {\n      ...row,\n      totalDirect: inflationAdjustedDirect,\n      totalHuman: inflationAdjustedHuman,\n      totalWtp: inflationAdjustedWtp,\n      total: inflationAdjustedDirect + inflationAdjustedHuman + inflationAdjustedWtp\n    };\n  });\n};\n\n// Aggregate totals and calculate yearly/daily averages\nexport const aggregateTotals = data => {\n  const totals = data.reduce((acc, row) => ({\n    totalDirect: acc.totalDirect + row.totalDirect,\n    totalHuman: acc.totalHuman + row.totalHuman,\n    totalWtp: acc.totalWtp + row.totalWtp,\n    total: acc.total + row.total\n  }), {\n    totalDirect: 0,\n    totalHuman: 0,\n    totalWtp: 0,\n    total: 0\n  });\n\n  // If the area only has property damage, ensure other costs remain 0\n  if (totals.totalHuman === 0 && totals.totalWtp === 0) {\n    totals.total = totals.totalDirect;\n  }\n  const yearly = {\n    totalDirect: totals.totalDirect / 3,\n    totalHuman: totals.totalHuman / 3,\n    totalWtp: totals.totalWtp / 3,\n    total: totals.total / 3\n  };\n  const daily = {\n    totalDirect: yearly.totalDirect / 365,\n    totalHuman: yearly.totalHuman / 365,\n    totalWtp: yearly.totalWtp / 365,\n    total: yearly.total / 365\n  };\n  return {\n    totals,\n    yearly,\n    daily\n  };\n};","map":{"version":3,"names":["turf","filterDataByArea","data","polygon","filter","row","point","LONGITUDE","LATITUDE","booleanPointInPolygon","adjustCounts","map","adjustedInjuries","adjustedPropertyDamage","adjustedFatalities","TYPE","Math","floor","count","calculateCosts","costMatrix","INJURY","direct","human","wtp","FATALITY","PROPERTY","totalDirect","totalHuman","totalWtp","inflationAdjustedDirect","inflationAdjustedHuman","inflationAdjustedWtp","total","aggregateTotals","totals","reduce","acc","yearly","daily"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/utils/costCalculations.js"],"sourcesContent":["import * as turf from '@turf/turf';\r\n\r\n// Filter collision data within the selected polygon\r\nexport const filterDataByArea = (data, polygon) => {\r\n  return data.filter((row) => {\r\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\r\n    return turf.booleanPointInPolygon(point, polygon);\r\n  });\r\n};\r\n\r\n// Adjust counts for injuries and property damage PER ROW\r\nexport const adjustCounts = (data) => {\r\n  return data.map((row) => {\r\n    let adjustedInjuries = 0;\r\n    let adjustedPropertyDamage = 0;\r\n    let adjustedFatalities = 0;\r\n\r\n    if (row.TYPE === 'INJURY') {\r\n      adjustedInjuries = Math.floor(row.count * 1.78);\r\n    } else if (row.TYPE === 'FATALITY') {\r\n      adjustedFatalities = Math.floor(row.count * 1.017);\r\n    } else if (row.TYPE === 'PROPERTY') {\r\n      adjustedPropertyDamage = row.count; // Property damage remains unchanged initially\r\n    }\r\n\r\n    return {\r\n      ...row,\r\n      adjustedInjuries,\r\n      adjustedPropertyDamage,\r\n      adjustedFatalities,\r\n    };\r\n  });\r\n};\r\n\r\n// Calculate costs PER ROW\r\nexport const calculateCosts = (data) => {\r\n  const costMatrix = {\r\n    INJURY: { direct: 48341, human: 89408, wtp: 158654 },\r\n    FATALITY: { direct: 225558, human: 2224580, wtp: 6707228 },\r\n    PROPERTY: { direct: 14065, human: 0, wtp: 0 },\r\n  };\r\n\r\n  return data.map((row) => {\r\n    let totalDirect = 0;\r\n    let totalHuman = 0;\r\n    let totalWtp = 0;\r\n\r\n    if (row.TYPE === 'INJURY') {\r\n      totalDirect = row.adjustedInjuries * costMatrix.INJURY.direct;\r\n      totalHuman = row.adjustedInjuries * costMatrix.INJURY.human;\r\n      totalWtp = row.adjustedInjuries * costMatrix.INJURY.wtp;\r\n    } else if (row.TYPE === 'FATALITY') {\r\n      totalDirect = row.adjustedFatalities * costMatrix.FATALITY.direct;\r\n      totalHuman = row.adjustedFatalities * costMatrix.FATALITY.human;\r\n      totalWtp = row.adjustedFatalities * costMatrix.FATALITY.wtp;\r\n    } else if (row.TYPE === 'PROPERTY') {\r\n      totalDirect = row.adjustedPropertyDamage * costMatrix.PROPERTY.direct;\r\n    }\r\n\r\n    // Apply inflation adjustment only to the valid costs\r\n    const inflationAdjustedDirect = totalDirect * 1.2084;\r\n    const inflationAdjustedHuman = totalHuman * 1.2084;\r\n    const inflationAdjustedWtp = totalWtp * 1.2084;\r\n\r\n    return {\r\n      ...row,\r\n      totalDirect: inflationAdjustedDirect,\r\n      totalHuman: inflationAdjustedHuman,\r\n      totalWtp: inflationAdjustedWtp,\r\n      total: inflationAdjustedDirect + inflationAdjustedHuman + inflationAdjustedWtp,\r\n    };\r\n  });\r\n};\r\n\r\n// Aggregate totals and calculate yearly/daily averages\r\nexport const aggregateTotals = (data) => {\r\n  const totals = data.reduce(\r\n    (acc, row) => ({\r\n      totalDirect: acc.totalDirect + row.totalDirect,\r\n      totalHuman: acc.totalHuman + row.totalHuman,\r\n      totalWtp: acc.totalWtp + row.totalWtp,\r\n      total: acc.total + row.total,\r\n    }),\r\n    { totalDirect: 0, totalHuman: 0, totalWtp: 0, total: 0 }\r\n  );\r\n\r\n  // If the area only has property damage, ensure other costs remain 0\r\n  if (totals.totalHuman === 0 && totals.totalWtp === 0) {\r\n    totals.total = totals.totalDirect;\r\n  }\r\n\r\n  const yearly = {\r\n    totalDirect: totals.totalDirect / 3,\r\n    totalHuman: totals.totalHuman / 3,\r\n    totalWtp: totals.totalWtp / 3,\r\n    total: totals.total / 3,\r\n  };\r\n\r\n  const daily = {\r\n    totalDirect: yearly.totalDirect / 365,\r\n    totalHuman: yearly.totalHuman / 365,\r\n    totalWtp: yearly.totalWtp / 365,\r\n    total: yearly.total / 365,\r\n  };\r\n\r\n  return { totals, yearly, daily };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}