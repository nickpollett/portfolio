{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicholas Pollett\\\\Documents\\\\GitHub\\\\CollisionCalculator\\\\calculator-website\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  collisionData,\n  onResultsUpdate\n}) => {\n  _s();\n  const [viewport, setViewport] = useState({\n    latitude: 52.1332,\n    longitude: -106.6700,\n    zoom: 11,\n    width: '100%',\n    height: '100%'\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [startPoint, setStartPoint] = useState(null);\n  const [selectedArea, setSelectedArea] = useState(null);\n  const mapRef = useRef(null);\n\n  // Handle mouse down to start rectangle selection\n  const handleMouseDown = useCallback(event => {\n    const {\n      lngLat\n    } = event;\n    setIsDragging(true);\n    setStartPoint(lngLat);\n    setSelectedArea(null);\n  }, []);\n\n  // Handle mouse move to update rectangle while dragging\n  const handleMouseMove = useCallback(event => {\n    if (!isDragging || !startPoint) return;\n    const {\n      lngLat\n    } = event;\n    const coordinates = [[[startPoint.lng, startPoint.lat], [startPoint.lng, lngLat.lat], [lngLat.lng, lngLat.lat], [lngLat.lng, startPoint.lat], [startPoint.lng, startPoint.lat] // Close the rectangle\n    ]];\n    setSelectedArea({\n      type: 'Polygon',\n      coordinates\n    });\n  }, [isDragging, startPoint]);\n\n  // Handle mouse up to finish rectangle selection\n  const handleMouseUp = useCallback(() => {\n    if (!isDragging || !selectedArea) return;\n    setIsDragging(false);\n\n    // Filter collision data within the selected area\n    const filteredData = filterDataByArea(collisionData, selectedArea);\n\n    // Count collisions by type\n    const counts = {\n      INJURY: filteredData.filter(row => row.TYPE === 'INJURY').length,\n      FATALITY: filteredData.filter(row => row.TYPE === 'FATALITY').length,\n      PROPERTY: filteredData.filter(row => row.TYPE === 'PROPERTY').length\n    };\n\n    // Format the data for cost calculations\n    const formattedData = [{\n      TYPE: 'INJURY',\n      count: counts.INJURY\n    }, {\n      TYPE: 'FATALITY',\n      count: counts.FATALITY\n    }, {\n      TYPE: 'PROPERTY',\n      count: counts.PROPERTY\n    }];\n\n    // Calculate costs for the filtered data\n    const adjustedData = adjustCounts(formattedData);\n    const costData = calculateCosts(adjustedData);\n    const {\n      totals,\n      yearly,\n      daily\n    } = aggregateTotals(costData);\n\n    // Pass results to the parent component\n    onResultsUpdate({\n      totals,\n      yearly,\n      daily\n    });\n  }, [isDragging, selectedArea, collisionData, onResultsUpdate]);\n  return /*#__PURE__*/_jsxDEV(ReactMapGL, {\n    ...viewport,\n    ref: mapRef,\n    mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n    onViewportChange: setViewport,\n    onMouseDown: handleMouseDown,\n    onMouseMove: handleMouseMove,\n    onMouseUp: handleMouseUp,\n    mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    scrollZoom: true // Enable zoom with scroll wheel\n    ,\n    doubleClickZoom: true // Enable zoom with double click\n    ,\n    children: selectedArea && /*#__PURE__*/_jsxDEV(Source, {\n      type: \"geojson\",\n      data: {\n        type: 'Feature',\n        geometry: selectedArea\n      },\n      children: [/*#__PURE__*/_jsxDEV(Layer, {\n        id: \"selected-area\",\n        type: \"fill\",\n        paint: {\n          'fill-color': '#3FB1CE',\n          'fill-opacity': 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Layer, {\n        id: \"selected-area-outline\",\n        type: \"line\",\n        paint: {\n          'line-color': '#3FB1CE',\n          'line-width': 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"nTov1WAlB9QsiumWHIl6dO5IDo0=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactMapGL","Source","Layer","calculateCosts","aggregateTotals","filterDataByArea","adjustCounts","jsxDEV","_jsxDEV","MapComponent","collisionData","onResultsUpdate","_s","viewport","setViewport","latitude","longitude","zoom","width","height","isDragging","setIsDragging","startPoint","setStartPoint","selectedArea","setSelectedArea","mapRef","handleMouseDown","event","lngLat","handleMouseMove","coordinates","lng","lat","type","handleMouseUp","filteredData","counts","INJURY","filter","row","TYPE","length","FATALITY","PROPERTY","formattedData","count","adjustedData","costData","totals","yearly","daily","ref","mapboxAccessToken","process","env","REACT_APP_MAPBOX_TOKEN","onViewportChange","onMouseDown","onMouseMove","onMouseUp","mapStyle","style","scrollZoom","doubleClickZoom","children","data","geometry","id","paint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\r\n\r\nconst MapComponent = ({ collisionData, onResultsUpdate }) => {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 52.1332,\r\n    longitude: -106.6700,\r\n    zoom: 11,\r\n    width: '100%',\r\n    height: '100%',\r\n  });\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [startPoint, setStartPoint] = useState(null);\r\n  const [selectedArea, setSelectedArea] = useState(null);\r\n  const mapRef = useRef(null);\r\n\r\n  // Handle mouse down to start rectangle selection\r\n  const handleMouseDown = useCallback((event) => {\r\n    const { lngLat } = event;\r\n    setIsDragging(true);\r\n    setStartPoint(lngLat);\r\n    setSelectedArea(null);\r\n  }, []);\r\n\r\n  // Handle mouse move to update rectangle while dragging\r\n  const handleMouseMove = useCallback((event) => {\r\n    if (!isDragging || !startPoint) return;\r\n\r\n    const { lngLat } = event;\r\n    const coordinates = [\r\n      [\r\n        [startPoint.lng, startPoint.lat],\r\n        [startPoint.lng, lngLat.lat],\r\n        [lngLat.lng, lngLat.lat],\r\n        [lngLat.lng, startPoint.lat],\r\n        [startPoint.lng, startPoint.lat], // Close the rectangle\r\n      ],\r\n    ];\r\n\r\n    setSelectedArea({\r\n      type: 'Polygon',\r\n      coordinates,\r\n    });\r\n  }, [isDragging, startPoint]);\r\n\r\n  // Handle mouse up to finish rectangle selection\r\n  const handleMouseUp = useCallback(() => {\r\n    if (!isDragging || !selectedArea) return;\r\n\r\n    setIsDragging(false);\r\n    \r\n    // Filter collision data within the selected area\r\n    const filteredData = filterDataByArea(collisionData, selectedArea);\r\n    \r\n    // Count collisions by type\r\n    const counts = {\r\n      INJURY: filteredData.filter((row) => row.TYPE === 'INJURY').length,\r\n      FATALITY: filteredData.filter((row) => row.TYPE === 'FATALITY').length,\r\n      PROPERTY: filteredData.filter((row) => row.TYPE === 'PROPERTY').length,\r\n    };\r\n\r\n    // Format the data for cost calculations\r\n    const formattedData = [\r\n      { TYPE: 'INJURY', count: counts.INJURY },\r\n      { TYPE: 'FATALITY', count: counts.FATALITY },\r\n      { TYPE: 'PROPERTY', count: counts.PROPERTY },\r\n    ];\r\n\r\n    // Calculate costs for the filtered data\r\n    const adjustedData = adjustCounts(formattedData);\r\n    const costData = calculateCosts(adjustedData);\r\n    const { totals, yearly, daily } = aggregateTotals(costData);\r\n\r\n    // Pass results to the parent component\r\n    onResultsUpdate({ totals, yearly, daily });\r\n  }, [isDragging, selectedArea, collisionData, onResultsUpdate]);\r\n\r\n  return (\r\n    <ReactMapGL\r\n      {...viewport}\r\n      ref={mapRef}\r\n      mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n      onViewportChange={setViewport}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseUp={handleMouseUp}\r\n      mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n      style={{ width: '100%', height: '100%' }}\r\n      scrollZoom={true}  // Enable zoom with scroll wheel\r\n      doubleClickZoom={true}  // Enable zoom with double click\r\n    >\r\n      {/* Render the selected area as a rectangle on the map */}\r\n      {selectedArea && (\r\n        <Source type=\"geojson\" data={{ type: 'Feature', geometry: selectedArea }}>\r\n          <Layer\r\n            id=\"selected-area\"\r\n            type=\"fill\"\r\n            paint={{\r\n              'fill-color': '#3FB1CE',\r\n              'fill-opacity': 0.5,\r\n            }}\r\n          />\r\n          <Layer\r\n            id=\"selected-area-outline\"\r\n            type=\"line\"\r\n            paint={{\r\n              'line-color': '#3FB1CE',\r\n              'line-width': 2,\r\n            }}\r\n          />\r\n        </Source>\r\n      )}\r\n    </ReactMapGL>\r\n  );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAC5D,OAAOC,UAAU,IAAIC,MAAM,EAAEC,KAAK,QAAQ,cAAc;AACxD,OAAO,8BAA8B;AACrC,SAASC,cAAc,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,YAAY,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5G,MAAMC,YAAY,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC3D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC;IACvCkB,QAAQ,EAAE,OAAO;IACjBC,SAAS,EAAE,CAAC,QAAQ;IACpBC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC2B,YAAY,EAAEC,eAAe,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM6B,MAAM,GAAG5B,MAAM,CAAC,IAAI,CAAC;;EAE3B;EACA,MAAM6B,eAAe,GAAG5B,WAAW,CAAE6B,KAAK,IAAK;IAC7C,MAAM;MAAEC;IAAO,CAAC,GAAGD,KAAK;IACxBP,aAAa,CAAC,IAAI,CAAC;IACnBE,aAAa,CAACM,MAAM,CAAC;IACrBJ,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,eAAe,GAAG/B,WAAW,CAAE6B,KAAK,IAAK;IAC7C,IAAI,CAACR,UAAU,IAAI,CAACE,UAAU,EAAE;IAEhC,MAAM;MAAEO;IAAO,CAAC,GAAGD,KAAK;IACxB,MAAMG,WAAW,GAAG,CAClB,CACE,CAACT,UAAU,CAACU,GAAG,EAAEV,UAAU,CAACW,GAAG,CAAC,EAChC,CAACX,UAAU,CAACU,GAAG,EAAEH,MAAM,CAACI,GAAG,CAAC,EAC5B,CAACJ,MAAM,CAACG,GAAG,EAAEH,MAAM,CAACI,GAAG,CAAC,EACxB,CAACJ,MAAM,CAACG,GAAG,EAAEV,UAAU,CAACW,GAAG,CAAC,EAC5B,CAACX,UAAU,CAACU,GAAG,EAAEV,UAAU,CAACW,GAAG,CAAC,CAAE;IAAA,CACnC,CACF;IAEDR,eAAe,CAAC;MACdS,IAAI,EAAE,SAAS;MACfH;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,UAAU,EAAEE,UAAU,CAAC,CAAC;;EAE5B;EACA,MAAMa,aAAa,GAAGpC,WAAW,CAAC,MAAM;IACtC,IAAI,CAACqB,UAAU,IAAI,CAACI,YAAY,EAAE;IAElCH,aAAa,CAAC,KAAK,CAAC;;IAEpB;IACA,MAAMe,YAAY,GAAG/B,gBAAgB,CAACK,aAAa,EAAEc,YAAY,CAAC;;IAElE;IACA,MAAMa,MAAM,GAAG;MACbC,MAAM,EAAEF,YAAY,CAACG,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAK,QAAQ,CAAC,CAACC,MAAM;MAClEC,QAAQ,EAAEP,YAAY,CAACG,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAK,UAAU,CAAC,CAACC,MAAM;MACtEE,QAAQ,EAAER,YAAY,CAACG,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,KAAK,UAAU,CAAC,CAACC;IAClE,CAAC;;IAED;IACA,MAAMG,aAAa,GAAG,CACpB;MAAEJ,IAAI,EAAE,QAAQ;MAAEK,KAAK,EAAET,MAAM,CAACC;IAAO,CAAC,EACxC;MAAEG,IAAI,EAAE,UAAU;MAAEK,KAAK,EAAET,MAAM,CAACM;IAAS,CAAC,EAC5C;MAAEF,IAAI,EAAE,UAAU;MAAEK,KAAK,EAAET,MAAM,CAACO;IAAS,CAAC,CAC7C;;IAED;IACA,MAAMG,YAAY,GAAGzC,YAAY,CAACuC,aAAa,CAAC;IAChD,MAAMG,QAAQ,GAAG7C,cAAc,CAAC4C,YAAY,CAAC;IAC7C,MAAM;MAAEE,MAAM;MAAEC,MAAM;MAAEC;IAAM,CAAC,GAAG/C,eAAe,CAAC4C,QAAQ,CAAC;;IAE3D;IACArC,eAAe,CAAC;MAAEsC,MAAM;MAAEC,MAAM;MAAEC;IAAM,CAAC,CAAC;EAC5C,CAAC,EAAE,CAAC/B,UAAU,EAAEI,YAAY,EAAEd,aAAa,EAAEC,eAAe,CAAC,CAAC;EAE9D,oBACEH,OAAA,CAACR,UAAU;IAAA,GACLa,QAAQ;IACZuC,GAAG,EAAE1B,MAAO;IACZ2B,iBAAiB,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB;IACtDC,gBAAgB,EAAE3C,WAAY;IAC9B4C,WAAW,EAAE/B,eAAgB;IAC7BgC,WAAW,EAAE7B,eAAgB;IAC7B8B,SAAS,EAAEzB,aAAc;IACzB0B,QAAQ,EAAC,oCAAoC;IAC7CC,KAAK,EAAE;MAAE5C,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IACzC4C,UAAU,EAAE,IAAK,CAAE;IAAA;IACnBC,eAAe,EAAE,IAAK,CAAE;IAAA;IAAAC,QAAA,EAGvBzC,YAAY,iBACXhB,OAAA,CAACP,MAAM;MAACiC,IAAI,EAAC,SAAS;MAACgC,IAAI,EAAE;QAAEhC,IAAI,EAAE,SAAS;QAAEiC,QAAQ,EAAE3C;MAAa,CAAE;MAAAyC,QAAA,gBACvEzD,OAAA,CAACN,KAAK;QACJkE,EAAE,EAAC,eAAe;QAClBlC,IAAI,EAAC,MAAM;QACXmC,KAAK,EAAE;UACL,YAAY,EAAE,SAAS;UACvB,cAAc,EAAE;QAClB;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACFjE,OAAA,CAACN,KAAK;QACJkE,EAAE,EAAC,uBAAuB;QAC1BlC,IAAI,EAAC,MAAM;QACXmC,KAAK,EAAE;UACL,YAAY,EAAE,SAAS;UACvB,YAAY,EAAE;QAChB;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EACT;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEjB,CAAC;AAAC7D,EAAA,CAhHIH,YAAY;AAAAiE,EAAA,GAAZjE,YAAY;AAkHlB,eAAeA,YAAY;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}