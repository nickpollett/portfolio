{"ast":null,"code":"import * as turf from '@turf/turf';\n\n// Filter collision data within the selected polygon\nexport const filterDataByArea = (data, polygon) => {\n  return data.filter(row => {\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\n    return turf.booleanPointInPolygon(point, polygon);\n  });\n};\n\n// Adjust counts for injuries and property damage\nexport const adjustCounts = data => {\n  let totalInjuries = 0;\n  let totalPropertyDamage = 0;\n  let totalFatalities = 0;\n\n  // First pass: count initial totals\n  data.forEach(row => {\n    if (row.TYPE === 'INJURY') {\n      totalInjuries += row.count;\n    } else if (row.TYPE === 'FATALITY') {\n      totalFatalities += row.count;\n    } else if (row.TYPE === 'PROPERTY') {\n      totalPropertyDamage += row.count;\n    }\n  });\n\n  // Adjust values\n  const adjustedInjuries = Math.floor(totalInjuries * 1.78);\n  const injuryDifference = adjustedInjuries - totalInjuries;\n  const adjustedPropertyDamage = Math.max(0, totalPropertyDamage - injuryDifference);\n  const adjustedFatalities = Math.floor(totalFatalities * 1.017);\n  return {\n    adjustedInjuries,\n    adjustedPropertyDamage,\n    adjustedFatalities\n  };\n};\n\n// Calculate costs using the adjusted values\nexport const calculateCosts = ({\n  adjustedInjuries,\n  adjustedPropertyDamage,\n  adjustedFatalities\n}) => {\n  const costMatrix = {\n    INJURY: {\n      direct: 48341,\n      human: 89408,\n      wtp: 158654\n    },\n    FATALITY: {\n      direct: 225558,\n      human: 2224580,\n      wtp: 6707228\n    },\n    PROPERTY: {\n      direct: 14065,\n      human: 0,\n      wtp: 0\n    }\n  };\n\n  // Calculate costs using the matrix\n  const totalDirect = adjustedInjuries * costMatrix.INJURY.direct + adjustedFatalities * costMatrix.FATALITY.direct + adjustedPropertyDamage * costMatrix.PROPERTY.direct;\n  const totalHuman = adjustedInjuries * costMatrix.INJURY.human + adjustedFatalities * costMatrix.FATALITY.human;\n  const totalWtp = adjustedInjuries * costMatrix.INJURY.wtp + adjustedFatalities * costMatrix.FATALITY.wtp;\n\n  // Apply inflation adjustment\n  const inflationAdjustedDirect = totalDirect * 1.2084;\n  const inflationAdjustedHuman = totalHuman * 1.2084;\n  const inflationAdjustedWtp = totalWtp * 1.2084;\n\n  // Sum all inflation-adjusted costs\n  const totalInflationAdjusted = inflationAdjustedDirect + inflationAdjustedHuman + inflationAdjustedWtp;\n  return {\n    totalDirect: inflationAdjustedDirect,\n    totalHuman: inflationAdjustedHuman,\n    totalWtp: inflationAdjustedWtp,\n    total: totalInflationAdjusted\n  };\n};\n\n// Aggregate totals and calculate yearly/daily averages\nexport const aggregateTotals = costs => {\n  const yearly = {\n    totalDirect: costs.totalDirect / 3,\n    totalHuman: costs.totalHuman / 3,\n    totalWtp: costs.totalWtp / 3,\n    total: costs.total / 3\n  };\n  const daily = {\n    totalDirect: yearly.totalDirect / 365,\n    totalHuman: yearly.totalHuman / 365,\n    totalWtp: yearly.totalWtp / 365,\n    total: yearly.total / 365\n  };\n  return {\n    totals: costs,\n    yearly,\n    daily\n  };\n};","map":{"version":3,"names":["turf","filterDataByArea","data","polygon","filter","row","point","LONGITUDE","LATITUDE","booleanPointInPolygon","adjustCounts","totalInjuries","totalPropertyDamage","totalFatalities","forEach","TYPE","count","adjustedInjuries","Math","floor","injuryDifference","adjustedPropertyDamage","max","adjustedFatalities","calculateCosts","costMatrix","INJURY","direct","human","wtp","FATALITY","PROPERTY","totalDirect","totalHuman","totalWtp","inflationAdjustedDirect","inflationAdjustedHuman","inflationAdjustedWtp","totalInflationAdjusted","total","aggregateTotals","costs","yearly","daily","totals"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/utils/costCalculations.js"],"sourcesContent":["import * as turf from '@turf/turf';\r\n\r\n// Filter collision data within the selected polygon\r\nexport const filterDataByArea = (data, polygon) => {\r\n  return data.filter((row) => {\r\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\r\n    return turf.booleanPointInPolygon(point, polygon);\r\n  });\r\n};\r\n\r\n// Adjust counts for injuries and property damage\r\nexport const adjustCounts = (data) => {\r\n  let totalInjuries = 0;\r\n  let totalPropertyDamage = 0;\r\n  let totalFatalities = 0;\r\n\r\n  // First pass: count initial totals\r\n  data.forEach((row) => {\r\n    if (row.TYPE === 'INJURY') {\r\n      totalInjuries += row.count;\r\n    } else if (row.TYPE === 'FATALITY') {\r\n      totalFatalities += row.count;\r\n    } else if (row.TYPE === 'PROPERTY') {\r\n      totalPropertyDamage += row.count;\r\n    }\r\n  });\r\n\r\n  // Adjust values\r\n  const adjustedInjuries = Math.floor(totalInjuries * 1.78);\r\n  const injuryDifference = adjustedInjuries - totalInjuries;\r\n  const adjustedPropertyDamage = Math.max(0, totalPropertyDamage - injuryDifference);\r\n  const adjustedFatalities = Math.floor(totalFatalities * 1.017);\r\n\r\n  return {\r\n    adjustedInjuries,\r\n    adjustedPropertyDamage,\r\n    adjustedFatalities,\r\n  };\r\n};\r\n\r\n// Calculate costs using the adjusted values\r\nexport const calculateCosts = ({ adjustedInjuries, adjustedPropertyDamage, adjustedFatalities }) => {\r\n  const costMatrix = {\r\n    INJURY: { direct: 48341, human: 89408, wtp: 158654 },\r\n    FATALITY: { direct: 225558, human: 2224580, wtp: 6707228 },\r\n    PROPERTY: { direct: 14065, human: 0, wtp: 0 },\r\n  };\r\n\r\n  // Calculate costs using the matrix\r\n  const totalDirect = \r\n    adjustedInjuries * costMatrix.INJURY.direct +\r\n    adjustedFatalities * costMatrix.FATALITY.direct +\r\n    adjustedPropertyDamage * costMatrix.PROPERTY.direct;\r\n\r\n  const totalHuman = \r\n    adjustedInjuries * costMatrix.INJURY.human +\r\n    adjustedFatalities * costMatrix.FATALITY.human;\r\n\r\n  const totalWtp = \r\n    adjustedInjuries * costMatrix.INJURY.wtp +\r\n    adjustedFatalities * costMatrix.FATALITY.wtp;\r\n\r\n  // Apply inflation adjustment\r\n  const inflationAdjustedDirect = totalDirect * 1.2084;\r\n  const inflationAdjustedHuman = totalHuman * 1.2084;\r\n  const inflationAdjustedWtp = totalWtp * 1.2084;\r\n\r\n  // Sum all inflation-adjusted costs\r\n  const totalInflationAdjusted = inflationAdjustedDirect + inflationAdjustedHuman + inflationAdjustedWtp;\r\n\r\n  return {\r\n    totalDirect: inflationAdjustedDirect,\r\n    totalHuman: inflationAdjustedHuman,\r\n    totalWtp: inflationAdjustedWtp,\r\n    total: totalInflationAdjusted,\r\n  };\r\n};\r\n\r\n// Aggregate totals and calculate yearly/daily averages\r\nexport const aggregateTotals = (costs) => {\r\n  const yearly = {\r\n    totalDirect: costs.totalDirect / 3,\r\n    totalHuman: costs.totalHuman / 3,\r\n    totalWtp: costs.totalWtp / 3,\r\n    total: costs.total / 3,\r\n  };\r\n\r\n  const daily = {\r\n    totalDirect: yearly.totalDirect / 365,\r\n    totalHuman: yearly.totalHuman / 365,\r\n    totalWtp: yearly.totalWtp / 365,\r\n    total: yearly.total / 365,\r\n  };\r\n\r\n  return { totals: costs, yearly, daily };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}