{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\react-map-gl\\src\\types\\common.ts"],"sourcesContent":["import type GeoJSON from 'geojson';\nimport type {AnyLayer} from './style-spec';\n\n/* Data types */\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport type PointLike = Point | [number, number];\n\nexport interface LngLat {\n  lng: number;\n  lat: number;\n}\nexport type LngLatLike =\n  | [number, number]\n  | LngLat\n  | {lng: number; lat: number}\n  | {lon: number; lat: number};\n\nexport interface LngLatBounds {\n  sw: LngLatLike;\n  ne: LngLatLike;\n\n  contains(lnglat: LngLatLike): boolean;\n\n  getCenter(): LngLat;\n  getSouthWest(): LngLat;\n  getNorthEast(): LngLat;\n  getNorthWest(): LngLat;\n  getSouthEast(): LngLat;\n\n  getWest(): number;\n  getSouth(): number;\n  getEast(): number;\n  getNorth(): number;\n}\nexport type LngLatBoundsLike =\n  | LngLatBounds\n  | [LngLatLike, LngLatLike]\n  | [number, number, number, number]\n  | LngLatLike;\n\nexport type Anchor =\n  | 'center'\n  | 'left'\n  | 'right'\n  | 'top'\n  | 'bottom'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right';\n\nexport type Alignment = 'map' | 'viewport' | 'auto';\n\nexport type PaddingOptions = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n};\n\n/** Describes the camera's state */\nexport type ViewState = {\n  /** Longitude at map center */\n  longitude: number;\n  /** Latitude at map center */\n  latitude: number;\n  /** Map zoom level */\n  zoom: number;\n  /** Map rotation bearing in degrees counter-clockwise from north */\n  bearing: number;\n  /** Map angle in degrees at which the camera is looking at the ground */\n  pitch: number;\n  /** Dimensions in pixels applied on each side of the viewport for shifting the vanishing point. */\n  padding: PaddingOptions;\n};\n\nexport type ControlPosition = 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n\nexport interface ImmutableLike<T> {\n  toJS: () => T;\n}\n\nexport type MapGeoJSONFeature = GeoJSON.Feature<GeoJSON.Geometry> & {\n  layer: AnyLayer;\n  source: string;\n  sourceLayer: string;\n  state: {[key: string]: any};\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}