{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nicholas Pollett\\\\Documents\\\\GitHub\\\\CollisionCalculator\\\\calculator-website\\\\src\\\\components\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  collisionData,\n  onResultsUpdate\n}) => {\n  _s();\n  const [viewport, setViewport] = useState({\n    latitude: 52.1332,\n    longitude: -106.6700,\n    zoom: 11,\n    width: '100%',\n    height: '100%'\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [firstCorner, setFirstCorner] = useState(null);\n  const [currentPoint, setCurrentPoint] = useState(null);\n  const [selectedArea, setSelectedArea] = useState(null);\n  const mapRef = useRef(null);\n\n  // Handle mouse down to start drawing\n  const handleMouseDown = useCallback(event => {\n    const {\n      lngLat\n    } = event;\n    setFirstCorner(lngLat);\n    setCurrentPoint(lngLat);\n    setIsDragging(true);\n  }, []);\n\n  // Handle mouse move while drawing\n  const handleMouseMove = useCallback(event => {\n    if (!isDragging || !firstCorner) return;\n    const {\n      lngLat\n    } = event;\n    setCurrentPoint(lngLat);\n\n    // Create temporary rectangle while dragging\n    const coordinates = [[[firstCorner.lng, firstCorner.lat], [firstCorner.lng, lngLat.lat], [lngLat.lng, lngLat.lat], [lngLat.lng, firstCorner.lat], [firstCorner.lng, firstCorner.lat] // Close the rectangle\n    ]];\n    setSelectedArea({\n      type: 'Polygon',\n      coordinates\n    });\n  }, [isDragging, firstCorner]);\n\n  // Handle mouse up to finish drawing\n  const handleMouseUp = useCallback(event => {\n    if (!isDragging || !firstCorner) return;\n    const {\n      lngLat\n    } = event;\n    setIsDragging(false);\n    setCurrentPoint(null);\n\n    // Create the final rectangle\n    const coordinates = [[[firstCorner.lng, firstCorner.lat], [firstCorner.lng, lngLat.lat], [lngLat.lng, lngLat.lat], [lngLat.lng, firstCorner.lat], [firstCorner.lng, firstCorner.lat] // Close the rectangle\n    ]];\n\n    // Set the selected area\n    setSelectedArea({\n      type: 'Polygon',\n      coordinates\n    });\n\n    // Filter collision data within the selected area\n    const filteredData = filterDataByArea(collisionData, {\n      type: 'Polygon',\n      coordinates\n    });\n\n    // Count collisions by type\n    const counts = {\n      INJURY: filteredData.filter(row => row.TYPE === 'INJURY').length,\n      FATALITY: filteredData.filter(row => row.TYPE === 'FATALITY').length,\n      PROPERTY: filteredData.filter(row => row.TYPE === 'PROPERTY').length\n    };\n\n    // Format the data for cost calculations\n    const formattedData = [{\n      TYPE: 'INJURY',\n      count: counts.INJURY\n    }, {\n      TYPE: 'FATALITY',\n      count: counts.FATALITY\n    }, {\n      TYPE: 'PROPERTY',\n      count: counts.PROPERTY\n    }];\n\n    // Calculate costs for the filtered data\n    const adjustedData = adjustCounts(formattedData);\n    const costData = calculateCosts(adjustedData);\n    const {\n      totals,\n      yearly,\n      daily\n    } = aggregateTotals(costData);\n\n    // Pass results to the parent component\n    onResultsUpdate({\n      totals,\n      yearly,\n      daily\n    });\n\n    // Reset the first corner for the next selection\n    setFirstCorner(null);\n  }, [isDragging, firstCorner, collisionData, onResultsUpdate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactMapGL, {\n      ...viewport,\n      ref: mapRef,\n      mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      onViewportChange: newViewport => {\n        setViewport(newViewport);\n      },\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      scrollZoom: true,\n      doubleClickZoom: true,\n      dragPan: !isDragging // Disable panning while drawing\n      ,\n      dragRotate: true,\n      touchZoom: true,\n      touchRotate: true,\n      minZoom: 1,\n      maxZoom: 20,\n      children: selectedArea && /*#__PURE__*/_jsxDEV(Source, {\n        type: \"geojson\",\n        data: {\n          type: 'Feature',\n          geometry: selectedArea\n        },\n        children: [/*#__PURE__*/_jsxDEV(Layer, {\n          id: \"selected-area\",\n          type: \"fill\",\n          paint: {\n            'fill-color': '#3FB1CE',\n            'fill-opacity': 0.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Layer, {\n          id: \"selected-area-outline\",\n          type: \"line\",\n          paint: {\n            'line-color': '#3FB1CE',\n            'line-width': 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), isDragging && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        cursor: 'crosshair'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"FXudLtRytfIeW94VcVrp3rIrC4k=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactMapGL","Source","Layer","calculateCosts","aggregateTotals","filterDataByArea","adjustCounts","jsxDEV","_jsxDEV","MapComponent","collisionData","onResultsUpdate","_s","viewport","setViewport","latitude","longitude","zoom","width","height","isDragging","setIsDragging","firstCorner","setFirstCorner","currentPoint","setCurrentPoint","selectedArea","setSelectedArea","mapRef","handleMouseDown","event","lngLat","handleMouseMove","coordinates","lng","lat","type","handleMouseUp","filteredData","counts","INJURY","filter","row","TYPE","length","FATALITY","PROPERTY","formattedData","count","adjustedData","costData","totals","yearly","daily","style","position","children","ref","mapboxAccessToken","process","env","REACT_APP_MAPBOX_TOKEN","onViewportChange","newViewport","onMouseDown","onMouseMove","onMouseUp","mapStyle","scrollZoom","doubleClickZoom","dragPan","dragRotate","touchZoom","touchRotate","minZoom","maxZoom","data","geometry","id","paint","fileName","_jsxFileName","lineNumber","columnNumber","top","left","right","bottom","cursor","_c","$RefreshReg$"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/components/MapComponent.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactMapGL, { Source, Layer } from 'react-map-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { calculateCosts, aggregateTotals, filterDataByArea, adjustCounts } from '../utils/costCalculations';\r\n\r\nconst MapComponent = ({ collisionData, onResultsUpdate }) => {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 52.1332,\r\n    longitude: -106.6700,\r\n    zoom: 11,\r\n    width: '100%',\r\n    height: '100%',\r\n  });\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [firstCorner, setFirstCorner] = useState(null);\r\n  const [currentPoint, setCurrentPoint] = useState(null);\r\n  const [selectedArea, setSelectedArea] = useState(null);\r\n  const mapRef = useRef(null);\r\n\r\n  // Handle mouse down to start drawing\r\n  const handleMouseDown = useCallback((event) => {\r\n    const { lngLat } = event;\r\n    setFirstCorner(lngLat);\r\n    setCurrentPoint(lngLat);\r\n    setIsDragging(true);\r\n  }, []);\r\n\r\n  // Handle mouse move while drawing\r\n  const handleMouseMove = useCallback((event) => {\r\n    if (!isDragging || !firstCorner) return;\r\n\r\n    const { lngLat } = event;\r\n    setCurrentPoint(lngLat);\r\n\r\n    // Create temporary rectangle while dragging\r\n    const coordinates = [\r\n      [\r\n        [firstCorner.lng, firstCorner.lat],\r\n        [firstCorner.lng, lngLat.lat],\r\n        [lngLat.lng, lngLat.lat],\r\n        [lngLat.lng, firstCorner.lat],\r\n        [firstCorner.lng, firstCorner.lat], // Close the rectangle\r\n      ],\r\n    ];\r\n\r\n    setSelectedArea({\r\n      type: 'Polygon',\r\n      coordinates,\r\n    });\r\n  }, [isDragging, firstCorner]);\r\n\r\n  // Handle mouse up to finish drawing\r\n  const handleMouseUp = useCallback((event) => {\r\n    if (!isDragging || !firstCorner) return;\r\n\r\n    const { lngLat } = event;\r\n    setIsDragging(false);\r\n    setCurrentPoint(null);\r\n\r\n    // Create the final rectangle\r\n    const coordinates = [\r\n      [\r\n        [firstCorner.lng, firstCorner.lat],\r\n        [firstCorner.lng, lngLat.lat],\r\n        [lngLat.lng, lngLat.lat],\r\n        [lngLat.lng, firstCorner.lat],\r\n        [firstCorner.lng, firstCorner.lat], // Close the rectangle\r\n      ],\r\n    ];\r\n\r\n    // Set the selected area\r\n    setSelectedArea({\r\n      type: 'Polygon',\r\n      coordinates,\r\n    });\r\n\r\n    // Filter collision data within the selected area\r\n    const filteredData = filterDataByArea(collisionData, {\r\n      type: 'Polygon',\r\n      coordinates,\r\n    });\r\n\r\n    // Count collisions by type\r\n    const counts = {\r\n      INJURY: filteredData.filter((row) => row.TYPE === 'INJURY').length,\r\n      FATALITY: filteredData.filter((row) => row.TYPE === 'FATALITY').length,\r\n      PROPERTY: filteredData.filter((row) => row.TYPE === 'PROPERTY').length,\r\n    };\r\n\r\n    // Format the data for cost calculations\r\n    const formattedData = [\r\n      { TYPE: 'INJURY', count: counts.INJURY },\r\n      { TYPE: 'FATALITY', count: counts.FATALITY },\r\n      { TYPE: 'PROPERTY', count: counts.PROPERTY },\r\n    ];\r\n\r\n    // Calculate costs for the filtered data\r\n    const adjustedData = adjustCounts(formattedData);\r\n    const costData = calculateCosts(adjustedData);\r\n    const { totals, yearly, daily } = aggregateTotals(costData);\r\n\r\n    // Pass results to the parent component\r\n    onResultsUpdate({ totals, yearly, daily });\r\n\r\n    // Reset the first corner for the next selection\r\n    setFirstCorner(null);\r\n  }, [isDragging, firstCorner, collisionData, onResultsUpdate]);\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <ReactMapGL\r\n        {...viewport}\r\n        ref={mapRef}\r\n        mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n        onViewportChange={(newViewport) => {\r\n          setViewport(newViewport);\r\n        }}\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={handleMouseUp}\r\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n        style={{ width: '100%', height: '100%' }}\r\n        scrollZoom={true}\r\n        doubleClickZoom={true}\r\n        dragPan={!isDragging} // Disable panning while drawing\r\n        dragRotate={true}\r\n        touchZoom={true}\r\n        touchRotate={true}\r\n        minZoom={1}\r\n        maxZoom={20}\r\n      >\r\n        {selectedArea && (\r\n          <Source type=\"geojson\" data={{ type: 'Feature', geometry: selectedArea }}>\r\n            <Layer\r\n              id=\"selected-area\"\r\n              type=\"fill\"\r\n              paint={{\r\n                'fill-color': '#3FB1CE',\r\n                'fill-opacity': 0.5,\r\n              }}\r\n            />\r\n            <Layer\r\n              id=\"selected-area-outline\"\r\n              type=\"line\"\r\n              paint={{\r\n                'line-color': '#3FB1CE',\r\n                'line-width': 2,\r\n              }}\r\n            />\r\n          </Source>\r\n        )}\r\n      </ReactMapGL>\r\n      {isDragging && (\r\n        <div \r\n          style={{ \r\n            position: 'absolute', \r\n            top: 0, \r\n            left: 0, \r\n            right: 0, \r\n            bottom: 0, \r\n            cursor: 'crosshair' \r\n          }} \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}