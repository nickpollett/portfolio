{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Nicholas Pollett\\Documents\\GitHub\\CollisionCalculator\\calculator-website\\node_modules\\react-map-gl\\src\\types\\lib.ts"],"sourcesContent":["import type {PaddingOptions, LngLat, Point, LngLatLike, PointLike} from './common';\n\nexport interface IControl<MapT extends MapInstance = MapInstance> {\n  onAdd(map: MapT): HTMLElement;\n\n  onRemove(map: MapT): void;\n\n  getDefaultPosition?: (() => string) | undefined;\n}\n\ntype Listener = (event?: any) => any;\n\nexport interface Evented {\n  on(type: string, listener: Listener);\n\n  off(type?: string | any, listener?: Listener);\n\n  once(type: string, listener: Listener);\n}\n\n/**\n * A user-facing type that represents the minimal intersection between Mapbox.Map and Maplibre.Map\n * User provided `mapLib.Map` is supposed to implement this interface\n * Only losely typed for compatibility\n */\nexport interface MapInstance extends Evented {\n  // https://github.com/mapbox/mapbox-gl-js/issues/6522\n  fire(type: string, properties?: {[key: string]: any});\n\n  addControl(\n    control: IControl<this>,\n    position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'\n  );\n\n  removeControl(control: IControl<this>);\n\n  hasControl(control: IControl<this>): boolean;\n\n  resize(): this;\n\n  queryRenderedFeatures(geometry?: any, options?: any): any[];\n\n  setStyle(style: any, options?: any);\n\n  isMoving(): boolean;\n\n  getStyle(): any;\n\n  isStyleLoaded(): boolean | void;\n\n  addSource(id: string, source: any);\n\n  removeSource(id: string): this;\n\n  getSource(id: string): any;\n\n  addLayer(layer: any, before?: string);\n\n  moveLayer(id: string, beforeId?: string);\n\n  removeLayer(id: string);\n\n  getLayer(id: string): any;\n\n  setFilter(layer: string, filter?: any[] | boolean | null);\n\n  setLayerZoomRange(layerId: string, minzoom: number, maxzoom: number);\n\n  setPaintProperty(layer: string, name: string, value: any);\n\n  setLayoutProperty(layer: string, name: string, value: any);\n\n  project(lnglat: any): Point;\n\n  unproject(point: any): LngLat;\n\n  queryTerrainElevation?(lngLat: any, options?: any): number | null;\n\n  getContainer(): HTMLElement;\n\n  getCanvas(): HTMLCanvasElement;\n\n  remove(): void;\n\n  triggerRepaint(): void;\n\n  setPadding(padding: PaddingOptions);\n\n  fitBounds(bounds: any, options?: any);\n\n  setFog?(fog: any);\n\n  setLight?(options: any, lightOptions?: any);\n\n  setTerrain?(terrain?: any);\n}\n\nexport interface MarkerInstance extends Evented {\n  addTo(map: MapInstance): this;\n  remove(): this;\n\n  getLngLat(): LngLat;\n  setLngLat(lngLat: LngLatLike): this;\n\n  getElement(): HTMLElement;\n\n  setPopup(popup?: any): this;\n  getPopup(): any;\n\n  getOffset(): PointLike;\n  setOffset(offset: PointLike): this;\n\n  setDraggable(value: boolean): this;\n  isDraggable(): boolean;\n\n  getRotation(): number;\n  setRotation(rotation: number): this;\n\n  getRotationAlignment(): any;\n  setRotationAlignment(alignment: any): this;\n\n  getPitchAlignment(): any;\n  setPitchAlignment(alignment: any): this;\n}\n\nexport interface PopupInstance extends Evented {\n  options?: any;\n\n  addTo(map: MapInstance): this;\n  remove(): this;\n\n  isOpen(): boolean;\n\n  getLngLat(): LngLat;\n  setLngLat(lnglat: LngLatLike): this;\n\n  getElement(): HTMLElement;\n\n  setDOMContent(htmlNode: any): this;\n\n  getMaxWidth(): any;\n  setMaxWidth(maxWidth: any): this;\n\n  addClassName(className: string): void;\n  removeClassName(className: string): void;\n\n  setOffset(offset?: any): this;\n}\n\nexport interface AttributionControlInstance extends IControl {\n  _container?: HTMLElement;\n}\n\nexport interface FullscreenControlInstance extends IControl {\n  _controlContainer?: HTMLElement;\n}\n\nexport interface GeolocateControlInstance extends IControl, Evented {\n  _container?: HTMLElement;\n  trigger();\n}\n\nexport interface NavigationControlInstance extends IControl {\n  _container?: HTMLElement;\n}\n\nexport interface ScaleControlInstance extends IControl {\n  _container?: HTMLElement;\n  options?: any;\n  setUnit(unit: any): void;\n}\n\n/**\n * A user-facing type that represents the minimal intersection between Mapbox and Maplibre\n * User provided `mapLib` is supposed to implement this interface\n * Only losely typed for compatibility\n */\nexport interface MapLib<MapT extends MapInstance> {\n  supported?: (options: any) => boolean;\n\n  Map: {new (options: any): MapT};\n\n  Marker: {new (...options: any[]): MarkerInstance};\n\n  Popup: {new (options: any): PopupInstance};\n\n  AttributionControl: {new (options: any): AttributionControlInstance};\n\n  FullscreenControl: {new (options: any): FullscreenControlInstance};\n\n  GeolocateControl: {new (options: any): GeolocateControlInstance};\n\n  NavigationControl: {new (options: any): NavigationControlInstance};\n\n  ScaleControl: {new (options: any): ScaleControlInstance};\n}\n\n/**\n * Stub for mapbox's Transform class\n * https://github.com/mapbox/mapbox-gl-js/blob/main/src/geo/transform.js\n */\nexport type Transform = {\n  width: number;\n  height: number;\n  center: LngLat;\n  zoom: number;\n  bearing: number;\n  pitch: number;\n  padding: PaddingOptions;\n  elevation: any;\n  pixelsToGLUnits: [number, number];\n  cameraElevationReference: 'ground' | 'sea';\n\n  clone: () => Transform;\n  resize: (width: number, height: number) => void;\n  isPaddingEqual: (value: PaddingOptions) => boolean;\n  getBounds: () => any;\n  locationPoint: (lngLat: LngLat) => Point;\n  pointLocation: (p: Point) => LngLat;\n};\n\nexport type MapInstanceInternal<MapT extends MapInstance> = MapT & {\n  transform: Transform;\n\n  _render: Function;\n\n  _renderTaskQueue: {\n    run: Function;\n  };\n};\n\n// Custom layer\nexport interface CustomLayerInterface {\n  id: string;\n  type: 'custom';\n  renderingMode?: '2d' | '3d';\n\n  onRemove?(map: MapInstance, gl: WebGLRenderingContext): void;\n  onAdd?(map: MapInstance, gl: WebGLRenderingContext): void;\n\n  prerender?(gl: WebGLRenderingContext, matrix: number[]): void;\n  render(gl: WebGLRenderingContext, matrix: number[]): void;\n}\n\n// Custom source\n\nexport interface CustomSourceImplementation<TileDataT> {\n  id: string;\n  type: 'custom';\n  dataType: 'raster';\n  minzoom?: number;\n  maxzoom?: number;\n  scheme?: string;\n  tileSize?: number;\n  attribution?: string;\n  bounds?: [number, number, number, number];\n  hasTile?: (tileID: {z: number; x: number; y: number}) => boolean;\n  loadTile: (\n    tileID: {z: number; x: number; y: number},\n    options: {signal: AbortSignal}\n  ) => Promise<TileDataT>;\n  prepareTile?: (tileID: {z: number; x: number; y: number}) => TileDataT | undefined;\n  unloadTile?: (tileID: {z: number; x: number; y: number}) => void;\n  onAdd?: (map: MapInstance) => void;\n  onRemove?: (map: MapInstance) => void;\n}\n\nexport interface CustomSource<TileDataT = unknown> {\n  id: string;\n  type: 'custom';\n  scheme: string;\n  minzoom: number;\n  maxzoom: number;\n  tileSize: number;\n  attribution: string;\n\n  _implementation: CustomSourceImplementation<TileDataT>;\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}