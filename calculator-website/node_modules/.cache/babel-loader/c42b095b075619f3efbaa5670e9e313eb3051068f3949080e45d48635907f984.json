{"ast":null,"code":"// Adjust counts for injuries and property damage\n\nimport * as turf from '@turf/turf';\n\n// Filter collision data within the selected polygon\nexport const filterDataByArea = (data, polygon) => {\n  return data.filter(row => {\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\n    return turf.booleanPointInPolygon(point, polygon);\n  });\n};\nexport const adjustCounts = data => {\n  return data.map(row => {\n    let adjustedInjuries = 0;\n    let adjustedProperty = 0;\n    if (row.TYPE === 'INJURY') {\n      adjustedInjuries = Math.floor(row.count * 1.78);\n      adjustedProperty = row.count - (adjustedInjuries - row.count);\n    } else if (row.TYPE === 'FATALITY') {\n      adjustedInjuries = Math.floor(row.count * 1.017);\n    } else {\n      adjustedProperty = row.count;\n    }\n    return {\n      ...row,\n      adjustedInjuries,\n      adjustedProperty\n    };\n  });\n};\n\n// Calculate costs for each type of collision\nexport const calculateCosts = data => {\n  const costMatrix = {\n    INJURY: {\n      direct: 48341,\n      human: 89408,\n      wtp: 158654\n    },\n    FATALITY: {\n      direct: 225558,\n      human: 2224580,\n      wtp: 6707228\n    },\n    PROPERTY: {\n      direct: 14065,\n      human: 0,\n      wtp: 0\n    }\n  };\n  return data.map(row => {\n    const {\n      TYPE,\n      adjustedInjuries,\n      adjustedProperty\n    } = row;\n    const costs = costMatrix[TYPE];\n    let totalDirect = 0;\n    let totalHuman = 0;\n    let totalWtp = 0;\n    if (TYPE === 'INJURY') {\n      totalDirect = adjustedInjuries * costs.direct * 1.2084;\n      totalHuman = adjustedInjuries * costs.human * 1.2084;\n      totalWtp = adjustedInjuries * costs.wtp * 1.2084;\n    } else if (TYPE === 'FATALITY') {\n      totalDirect = adjustedInjuries * costs.direct * 1.2084;\n      totalHuman = adjustedInjuries * costs.human * 1.2084;\n      totalWtp = adjustedInjuries * costs.wtp * 1.2084;\n    } else if (TYPE === 'PROPERTY') {\n      totalDirect = adjustedProperty * costs.direct * 1.2084;\n    }\n    const total = totalDirect + totalHuman + totalWtp;\n    return {\n      ...row,\n      totalDirect,\n      totalHuman,\n      totalWtp,\n      total\n    };\n  });\n};\n\n// Aggregate totals and calculate yearly/daily averages\nexport const aggregateTotals = data => {\n  const totals = data.reduce((acc, row) => ({\n    totalDirect: acc.totalDirect + row.totalDirect,\n    totalHuman: acc.totalHuman + row.totalHuman,\n    totalWtp: acc.totalWtp + row.totalWtp,\n    total: acc.total + row.total,\n    inflationAdjusted: acc.inflationAdjusted + row.inflationAdjusted\n  }), {\n    totalDirect: 0,\n    totalHuman: 0,\n    totalWtp: 0,\n    total: 0,\n    inflationAdjusted: 0\n  });\n  const yearly = {\n    totalDirect: totals.totalDirect / 3,\n    totalHuman: totals.totalHuman / 3,\n    totalWtp: totals.totalWtp / 3,\n    total: totals.total / 3,\n    inflationAdjusted: totals.inflationAdjusted / 3\n  };\n  const daily = {\n    totalDirect: yearly.totalDirect / 365,\n    totalHuman: yearly.totalHuman / 365,\n    totalWtp: yearly.totalWtp / 365,\n    total: yearly.total / 365,\n    inflationAdjusted: yearly.inflationAdjusted / 365\n  };\n  return {\n    totals,\n    yearly,\n    daily\n  };\n};","map":{"version":3,"names":["turf","filterDataByArea","data","polygon","filter","row","point","LONGITUDE","LATITUDE","booleanPointInPolygon","adjustCounts","map","adjustedInjuries","adjustedProperty","TYPE","Math","floor","count","calculateCosts","costMatrix","INJURY","direct","human","wtp","FATALITY","PROPERTY","costs","totalDirect","totalHuman","totalWtp","total","aggregateTotals","totals","reduce","acc","inflationAdjusted","yearly","daily"],"sources":["C:/Users/Nicholas Pollett/Documents/GitHub/CollisionCalculator/calculator-website/src/utils/costCalculations.js"],"sourcesContent":["// Adjust counts for injuries and property damage\r\n\r\nimport * as turf from '@turf/turf';\r\n\r\n// Filter collision data within the selected polygon\r\nexport const filterDataByArea = (data, polygon) => {\r\n  return data.filter((row) => {\r\n    const point = turf.point([row.LONGITUDE, row.LATITUDE]);\r\n    return turf.booleanPointInPolygon(point, polygon);\r\n  });\r\n};\r\n\r\nexport const adjustCounts = (data) => {\r\n    return data.map((row) => {\r\n      let adjustedInjuries = 0;\r\n      let adjustedProperty = 0;\r\n  \r\n      if (row.TYPE === 'INJURY') {\r\n        adjustedInjuries = Math.floor(row.count * 1.78);\r\n        adjustedProperty = row.count - (adjustedInjuries - row.count);\r\n      } else if (row.TYPE === 'FATALITY') {\r\n        adjustedInjuries = Math.floor(row.count * 1.017);\r\n      } else {\r\n        adjustedProperty = row.count;\r\n      }\r\n  \r\n      return {\r\n        ...row,\r\n        adjustedInjuries,\r\n        adjustedProperty,\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Calculate costs for each type of collision\r\n  export const calculateCosts = (data) => {\r\n    const costMatrix = {\r\n      INJURY: { direct: 48341, human: 89408, wtp: 158654 },\r\n      FATALITY: { direct: 225558, human: 2224580, wtp: 6707228 },\r\n      PROPERTY: { direct: 14065, human: 0, wtp: 0 },\r\n    };\r\n  \r\n    return data.map((row) => {\r\n      const { TYPE, adjustedInjuries, adjustedProperty } = row;\r\n      const costs = costMatrix[TYPE];\r\n  \r\n      let totalDirect = 0;\r\n      let totalHuman = 0;\r\n      let totalWtp = 0;\r\n  \r\n      if (TYPE === 'INJURY') {\r\n        totalDirect = adjustedInjuries * costs.direct * 1.2084;\r\n        totalHuman = adjustedInjuries * costs.human * 1.2084;\r\n        totalWtp = adjustedInjuries * costs.wtp * 1.2084;\r\n      } else if (TYPE === 'FATALITY') {\r\n        totalDirect = adjustedInjuries * costs.direct * 1.2084;\r\n        totalHuman = adjustedInjuries * costs.human * 1.2084;\r\n        totalWtp = adjustedInjuries * costs.wtp * 1.2084;\r\n      } else if (TYPE === 'PROPERTY') {\r\n        totalDirect = adjustedProperty * costs.direct * 1.2084;\r\n      }\r\n  \r\n      const total = totalDirect + totalHuman + totalWtp;\r\n  \r\n      return {\r\n        ...row,\r\n        totalDirect,\r\n        totalHuman,\r\n        totalWtp,\r\n        total,\r\n      };\r\n    });\r\n  };\r\n  \r\n  // Aggregate totals and calculate yearly/daily averages\r\n  export const aggregateTotals = (data) => {\r\n    const totals = data.reduce(\r\n      (acc, row) => ({\r\n        totalDirect: acc.totalDirect + row.totalDirect,\r\n        totalHuman: acc.totalHuman + row.totalHuman,\r\n        totalWtp: acc.totalWtp + row.totalWtp,\r\n        total: acc.total + row.total,\r\n        inflationAdjusted: acc.inflationAdjusted + row.inflationAdjusted,\r\n      }),\r\n      { totalDirect: 0, totalHuman: 0, totalWtp: 0, total: 0, inflationAdjusted: 0 }\r\n    );\r\n  \r\n    const yearly = {\r\n      totalDirect: totals.totalDirect / 3,\r\n      totalHuman: totals.totalHuman / 3,\r\n      totalWtp: totals.totalWtp / 3,\r\n      total: totals.total / 3,\r\n      inflationAdjusted: totals.inflationAdjusted / 3,\r\n    };\r\n  \r\n    const daily = {\r\n      totalDirect: yearly.totalDirect / 365,\r\n      totalHuman: yearly.totalHuman / 365,\r\n      totalWtp: yearly.totalWtp / 365,\r\n      total: yearly.total / 365,\r\n      inflationAdjusted: yearly.inflationAdjusted / 365,\r\n    };\r\n  \r\n    return { totals, yearly, daily };\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}